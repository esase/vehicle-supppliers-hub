// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
