// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ConfigEnvironment.
const (
	Production ConfigEnvironment = "Production"
	Sandbox    ConfigEnvironment = "Sandbox"
	Test       ConfigEnvironment = "Test"
)

// Defines values for KeyPatchOperationOp.
const (
	Add     KeyPatchOperationOp = "add"
	Remove  KeyPatchOperationOp = "remove"
	Replace KeyPatchOperationOp = "replace"
)

// Defines values for KeyPatchOperationPath.
const (
	Active      KeyPatchOperationPath = "/active"
	Description KeyPatchOperationPath = "/description"
)

// Defines values for StatusType.
const (
	Disabled StatusType = "Disabled"
	Enabled  StatusType = "Enabled"
)

// Defines values for ThreeDsAuthenticationResponse.
const (
	ThreeDsAuthenticationResponseN ThreeDsAuthenticationResponse = "N"
	ThreeDsAuthenticationResponseY ThreeDsAuthenticationResponse = "Y"
)

// Defines values for ThreeDsTransStatus.
const (
	ThreeDsTransStatusA ThreeDsTransStatus = "A"
	ThreeDsTransStatusC ThreeDsTransStatus = "C"
	ThreeDsTransStatusN ThreeDsTransStatus = "N"
	ThreeDsTransStatusR ThreeDsTransStatus = "R"
	ThreeDsTransStatusU ThreeDsTransStatus = "U"
	ThreeDsTransStatusY ThreeDsTransStatus = "Y"
)

// ApiKeyCreationParams defines model for ApiKeyCreationParams.
type ApiKeyCreationParams struct {
	AgencyId    float32 `json:"agencyId"`
	Description string  `json:"description"`
	TopAgencyId float32 `json:"topAgencyId"`
	UserId      float32 `json:"userId"`
}

// ApiKeyObject defines model for ApiKeyObject.
type ApiKeyObject struct {
	Active         bool    `json:"active"`
	AgencyId       float32 `json:"agencyId"`
	CreateDateTime string  `json:"createDateTime"`
	CreatorId      float32 `json:"creatorId"`
	Description    string  `json:"description"`
	Key            string  `json:"key"`
	TopAgencyId    float32 `json:"topAgencyId"`
	UpdateDateTime string  `json:"updateDateTime"`
	UpdaterId      float32 `json:"updaterId"`
	UserId         float32 `json:"userId"`
}

// ApiKeyPatchParams defines model for ApiKeyPatchParams.
type ApiKeyPatchParams struct {
	Operations []KeyPatchOperation `json:"operations"`
}

// CHD defines model for CHD.
type CHD struct {
	CardNumber      string   `json:"cardNumber"`
	CardholderName  string   `json:"cardholderName"`
	Cvv             string   `json:"cvv"`
	ExpirationMonth int      `json:"expirationMonth"`
	ExpirationYear  int      `json:"expirationYear"`
	ThreeDs         *ThreeDs `json:"threeDs,omitempty"`
}

// ConfigEnvironment Indicates where we will make the requests to.
type ConfigEnvironment string

// CreatedKeyResponse defines model for CreatedKeyResponse.
type CreatedKeyResponse struct {
	Key string `json:"key"`
}

// CurrencyCode ISO 4217 currency code
type CurrencyCode = string

// ErrorMessage defines model for ErrorMessage.
type ErrorMessage struct {
	Code    string  `json:"code"`
	Message *string `json:"message,omitempty"`
}

// KeyListResponse defines model for KeyListResponse.
type KeyListResponse struct {
	Keys *[]ApiKeyObject `json:"keys,omitempty"`

	// Limit Limit number.
	Limit *Limit `json:"limit,omitempty"`

	// NextPointer Next pointer value.
	NextPointer *NextPointer `json:"nextPointer,omitempty"`
}

// KeyPatchOperation According to RFC 6920. See examples at: https://tools.ietf.org/html/rfc6902
type KeyPatchOperation struct {
	Op    KeyPatchOperationOp     `json:"op"`
	Path  KeyPatchOperationPath   `json:"path"`
	Value KeyPatchOperation_Value `json:"value"`
}

// KeyPatchOperationOp defines model for KeyPatchOperation.Op.
type KeyPatchOperationOp string

// KeyPatchOperationPath defines model for KeyPatchOperation.Path.
type KeyPatchOperationPath string

// KeyPatchOperationValue0 defines model for .
type KeyPatchOperationValue0 = bool

// KeyPatchOperationValue1 defines model for .
type KeyPatchOperationValue1 = map[string]interface{}

// KeyPatchOperationValue2 defines model for .
type KeyPatchOperationValue2 = string

// KeyPatchOperationValue3 defines model for .
type KeyPatchOperationValue3 = float32

// KeyPatchOperationValue4 defines model for .
type KeyPatchOperationValue4 = []interface{}

// KeyPatchOperation_Value defines model for KeyPatchOperation.Value.
type KeyPatchOperation_Value struct {
	union json.RawMessage
}

// Limit Limit number.
type Limit = int

// NextPointer Next pointer value.
type NextPointer = string

// SingleApiKeyResponse defines model for SingleApiKeyResponse.
type SingleApiKeyResponse = ApiKeyObject

// StatusType defines model for StatusType.
type StatusType string

// ThreeDs defines model for ThreeDs.
type ThreeDs struct {
	// AuthenticationResponse transStatus from challenge response: indicates whether a transaction qualifies as an authenticated transaction or account verification.
	AuthenticationResponse *ThreeDsAuthenticationResponse `json:"authenticationResponse,omitempty"`

	// Cavv Cardholder authentication verification value or CAVV. The main encrypted message issuers and card networks use to verify authentication has occurred. Mastercard uses an AVV message and American Express uses an AEVV message, each of which should also be passed in the cavv parameter.
	Cavv *string `json:"cavv,omitempty"`

	// EciFlag The value of the electronic commerce indicator (ECI) flag, which indicates the outcome of the 3DS authentication. This will be a two-digit value.
	EciFlag string `json:"eciFlag"`

	// TransStatus Indicates whether a transaction qualifies as an authenticated transaction or account verification.
	TransStatus *ThreeDsTransStatus `json:"transStatus,omitempty"`

	// TransactionId Transaction identifier resulting from 3D Secure 2 authentication.
	TransactionId *string `json:"transactionId,omitempty"`

	// Version The version of 3D Secure authentication used for the transaction.
	Version *string `json:"version,omitempty"`

	// Xid Transaction identifier resulting from 3D Secure authentication. Uniquely identifies the transaction and sometimes required in the authorization message. This is a base64-encoded value.
	Xid *string `json:"xid,omitempty"`
}

// ThreeDsAuthenticationResponse transStatus from challenge response: indicates whether a transaction qualifies as an authenticated transaction or account verification.
type ThreeDsAuthenticationResponse string

// ThreeDsTransStatus Indicates whether a transaction qualifies as an authenticated transaction or account verification.
type ThreeDsTransStatus string

// Token base64 encoded and versioned (1.token) token. Decoding the token will give the object that was given on tokenize request (with CHD key and hmack) but CHD data is replaced with tokens that can be used in proxy.
type Token = string

// TokenRequestParams defines model for TokenRequestParams.
type TokenRequestParams = CHD

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	// Token base64 encoded and versioned (1.token) token. Decoding the token will give the object that was given on tokenize request (with CHD key and hmack) but CHD data is replaced with tokens that can be used in proxy.
	Token Token `json:"token"`
}

// ApiKeyHeader defines model for ApiKeyHeader.
type ApiKeyHeader = string

// ApiKeyInPath defines model for ApiKeyInPath.
type ApiKeyInPath = string

// ForwardToHeader defines model for ForwardToHeader.
type ForwardToHeader = string

// LimitInQuery defines model for LimitInQuery.
type LimitInQuery = int

// PointerInQuery defines model for PointerInQuery.
type PointerInQuery = string

// SptTokenHeader defines model for SptTokenHeader.
type SptTokenHeader = string

// StatusInQuery Contract status to filter the contract list.
type StatusInQuery = []StatusType

// TopAgencyIdsInQuery Top agency ids for filter
type TopAgencyIdsInQuery = []int

// UserAccessTokenHeader defines model for UserAccessTokenHeader.
type UserAccessTokenHeader = string

// UserIdsInQuery user ids for filter
type UserIdsInQuery = []int

// ConvertTokenToBookingDotComJSONBody defines parameters for ConvertTokenToBookingDotCom.
type ConvertTokenToBookingDotComJSONBody struct {
	AffiliateCode string `json:"affiliateCode"`

	// Environment Indicates where we will make the requests to.
	Environment ConfigEnvironment `json:"environment"`

	// TransactionCurrency ISO 4217 currency code
	TransactionCurrency CurrencyCode `json:"transactionCurrency"`
}

// ConvertTokenToBookingDotComParams defines parameters for ConvertTokenToBookingDotCom.
type ConvertTokenToBookingDotComParams struct {
	// XUserAccessToken User Access provided by CRG
	XUserAccessToken UserAccessTokenHeader `json:"x-user-access-token"`

	// XSptToken SPT token that is linked to CHD
	XSptToken SptTokenHeader `json:"x-spt-token"`
}

// DetokenizeJSONBody defines parameters for Detokenize.
type DetokenizeJSONBody = map[string]interface{}

// DetokenizeParams defines parameters for Detokenize.
type DetokenizeParams struct {
	// XUserAccessToken User Access provided by CRG
	XUserAccessToken UserAccessTokenHeader `json:"x-user-access-token"`

	// XSptToken SPT token that is linked to CHD
	XSptToken SptTokenHeader `json:"x-spt-token"`

	// XSptForwardTo The request is forwarded to
	XSptForwardTo ForwardToHeader `json:"x-spt-forward-to"`
}

// GetApiKeysParams defines parameters for GetApiKeys.
type GetApiKeysParams struct {
	// Limit Limit number of entities.
	Limit *LimitInQuery `form:"limit,omitempty" json:"limit,omitempty"`

	// Pointer A pointer to a next part of data.
	Pointer      *PointerInQuery      `form:"pointer,omitempty" json:"pointer,omitempty"`
	TopAgencyIds *TopAgencyIdsInQuery `form:"topAgencyIds,omitempty" json:"topAgencyIds,omitempty"`
	UserIds      *UserIdsInQuery      `form:"userIds,omitempty" json:"userIds,omitempty"`
	Status       *StatusInQuery       `form:"status,omitempty" json:"status,omitempty"`

	// XUserAccessToken User Access provided by CRG
	XUserAccessToken UserAccessTokenHeader `json:"x-user-access-token"`
}

// CreateApiKeyParams defines parameters for CreateApiKey.
type CreateApiKeyParams struct {
	// XUserAccessToken User Access provided by CRG
	XUserAccessToken UserAccessTokenHeader `json:"x-user-access-token"`
}

// GetApiKeyParams defines parameters for GetApiKey.
type GetApiKeyParams struct {
	// XUserAccessToken User Access provided by CRG
	XUserAccessToken UserAccessTokenHeader `json:"x-user-access-token"`
}

// PatchApiKeyParams defines parameters for PatchApiKey.
type PatchApiKeyParams struct {
	// XUserAccessToken User Access provided by CRG
	XUserAccessToken UserAccessTokenHeader `json:"x-user-access-token"`
}

// TokenizeParams defines parameters for Tokenize.
type TokenizeParams struct {
	// XSptApiKey API key to access the service
	XSptApiKey ApiKeyHeader `json:"x-spt-api-key"`
}

// ConvertTokenToBookingDotComJSONRequestBody defines body for ConvertTokenToBookingDotCom for application/json ContentType.
type ConvertTokenToBookingDotComJSONRequestBody ConvertTokenToBookingDotComJSONBody

// DetokenizeJSONRequestBody defines body for Detokenize for application/json ContentType.
type DetokenizeJSONRequestBody = DetokenizeJSONBody

// CreateApiKeyJSONRequestBody defines body for CreateApiKey for application/json ContentType.
type CreateApiKeyJSONRequestBody = ApiKeyCreationParams

// PatchApiKeyJSONRequestBody defines body for PatchApiKey for application/json ContentType.
type PatchApiKeyJSONRequestBody = ApiKeyPatchParams

// TokenizeJSONRequestBody defines body for Tokenize for application/json ContentType.
type TokenizeJSONRequestBody = TokenRequestParams

// AsKeyPatchOperationValue0 returns the union data inside the KeyPatchOperation_Value as a KeyPatchOperationValue0
func (t KeyPatchOperation_Value) AsKeyPatchOperationValue0() (KeyPatchOperationValue0, error) {
	var body KeyPatchOperationValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKeyPatchOperationValue0 overwrites any union data inside the KeyPatchOperation_Value as the provided KeyPatchOperationValue0
func (t *KeyPatchOperation_Value) FromKeyPatchOperationValue0(v KeyPatchOperationValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKeyPatchOperationValue0 performs a merge with any union data inside the KeyPatchOperation_Value, using the provided KeyPatchOperationValue0
func (t *KeyPatchOperation_Value) MergeKeyPatchOperationValue0(v KeyPatchOperationValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsKeyPatchOperationValue1 returns the union data inside the KeyPatchOperation_Value as a KeyPatchOperationValue1
func (t KeyPatchOperation_Value) AsKeyPatchOperationValue1() (KeyPatchOperationValue1, error) {
	var body KeyPatchOperationValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKeyPatchOperationValue1 overwrites any union data inside the KeyPatchOperation_Value as the provided KeyPatchOperationValue1
func (t *KeyPatchOperation_Value) FromKeyPatchOperationValue1(v KeyPatchOperationValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKeyPatchOperationValue1 performs a merge with any union data inside the KeyPatchOperation_Value, using the provided KeyPatchOperationValue1
func (t *KeyPatchOperation_Value) MergeKeyPatchOperationValue1(v KeyPatchOperationValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsKeyPatchOperationValue2 returns the union data inside the KeyPatchOperation_Value as a KeyPatchOperationValue2
func (t KeyPatchOperation_Value) AsKeyPatchOperationValue2() (KeyPatchOperationValue2, error) {
	var body KeyPatchOperationValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKeyPatchOperationValue2 overwrites any union data inside the KeyPatchOperation_Value as the provided KeyPatchOperationValue2
func (t *KeyPatchOperation_Value) FromKeyPatchOperationValue2(v KeyPatchOperationValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKeyPatchOperationValue2 performs a merge with any union data inside the KeyPatchOperation_Value, using the provided KeyPatchOperationValue2
func (t *KeyPatchOperation_Value) MergeKeyPatchOperationValue2(v KeyPatchOperationValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsKeyPatchOperationValue3 returns the union data inside the KeyPatchOperation_Value as a KeyPatchOperationValue3
func (t KeyPatchOperation_Value) AsKeyPatchOperationValue3() (KeyPatchOperationValue3, error) {
	var body KeyPatchOperationValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKeyPatchOperationValue3 overwrites any union data inside the KeyPatchOperation_Value as the provided KeyPatchOperationValue3
func (t *KeyPatchOperation_Value) FromKeyPatchOperationValue3(v KeyPatchOperationValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKeyPatchOperationValue3 performs a merge with any union data inside the KeyPatchOperation_Value, using the provided KeyPatchOperationValue3
func (t *KeyPatchOperation_Value) MergeKeyPatchOperationValue3(v KeyPatchOperationValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsKeyPatchOperationValue4 returns the union data inside the KeyPatchOperation_Value as a KeyPatchOperationValue4
func (t KeyPatchOperation_Value) AsKeyPatchOperationValue4() (KeyPatchOperationValue4, error) {
	var body KeyPatchOperationValue4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKeyPatchOperationValue4 overwrites any union data inside the KeyPatchOperation_Value as the provided KeyPatchOperationValue4
func (t *KeyPatchOperation_Value) FromKeyPatchOperationValue4(v KeyPatchOperationValue4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKeyPatchOperationValue4 performs a merge with any union data inside the KeyPatchOperation_Value, using the provided KeyPatchOperationValue4
func (t *KeyPatchOperation_Value) MergeKeyPatchOperationValue4(v KeyPatchOperationValue4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t KeyPatchOperation_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *KeyPatchOperation_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
