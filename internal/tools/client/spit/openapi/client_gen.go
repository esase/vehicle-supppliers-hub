// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Zabbix request
	Zabbix(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConvertTokenToBookingDotComWithBody request with any body
	ConvertTokenToBookingDotComWithBody(ctx context.Context, params *ConvertTokenToBookingDotComParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConvertTokenToBookingDotCom(ctx context.Context, params *ConvertTokenToBookingDotComParams, body ConvertTokenToBookingDotComJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DetokenizeWithBody request with any body
	DetokenizeWithBody(ctx context.Context, params *DetokenizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Detokenize(ctx context.Context, params *DetokenizeParams, body DetokenizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiKeys request
	GetApiKeys(ctx context.Context, params *GetApiKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApiKeyWithBody request with any body
	CreateApiKeyWithBody(ctx context.Context, params *CreateApiKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApiKey(ctx context.Context, params *CreateApiKeyParams, body CreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiKey request
	GetApiKey(ctx context.Context, apiKey ApiKeyInPath, params *GetApiKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiKeyWithBody request with any body
	PatchApiKeyWithBody(ctx context.Context, apiKey ApiKeyInPath, params *PatchApiKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiKey(ctx context.Context, apiKey ApiKeyInPath, params *PatchApiKeyParams, body PatchApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenApiJson request
	GetOpenApiJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TokenizeWithBody request with any body
	TokenizeWithBody(ctx context.Context, params *TokenizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Tokenize(ctx context.Context, params *TokenizeParams, body TokenizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Zabbix(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewZabbixRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConvertTokenToBookingDotComWithBody(ctx context.Context, params *ConvertTokenToBookingDotComParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertTokenToBookingDotComRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConvertTokenToBookingDotCom(ctx context.Context, params *ConvertTokenToBookingDotComParams, body ConvertTokenToBookingDotComJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertTokenToBookingDotComRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DetokenizeWithBody(ctx context.Context, params *DetokenizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDetokenizeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Detokenize(ctx context.Context, params *DetokenizeParams, body DetokenizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDetokenizeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKeys(ctx context.Context, params *GetApiKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKeysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiKeyWithBody(ctx context.Context, params *CreateApiKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiKeyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiKey(ctx context.Context, params *CreateApiKeyParams, body CreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiKeyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKey(ctx context.Context, apiKey ApiKeyInPath, params *GetApiKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKeyRequest(c.Server, apiKey, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiKeyWithBody(ctx context.Context, apiKey ApiKeyInPath, params *PatchApiKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiKeyRequestWithBody(c.Server, apiKey, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiKey(ctx context.Context, apiKey ApiKeyInPath, params *PatchApiKeyParams, body PatchApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiKeyRequest(c.Server, apiKey, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenApiJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenApiJsonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenizeWithBody(ctx context.Context, params *TokenizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenizeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Tokenize(ctx context.Context, params *TokenizeParams, body TokenizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenizeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewZabbixRequest generates requests for Zabbix
func NewZabbixRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConvertTokenToBookingDotComRequest calls the generic ConvertTokenToBookingDotCom builder with application/json body
func NewConvertTokenToBookingDotComRequest(server string, params *ConvertTokenToBookingDotComParams, body ConvertTokenToBookingDotComJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConvertTokenToBookingDotComRequestWithBody(server, params, "application/json", bodyReader)
}

// NewConvertTokenToBookingDotComRequestWithBody generates requests for ConvertTokenToBookingDotCom with any type of body
func NewConvertTokenToBookingDotComRequestWithBody(server string, params *ConvertTokenToBookingDotComParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/convert-token/booking-dot-com")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-user-access-token", runtime.ParamLocationHeader, params.XUserAccessToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-user-access-token", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-spt-token", runtime.ParamLocationHeader, params.XSptToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-spt-token", headerParam1)

	}

	return req, nil
}

// NewDetokenizeRequest calls the generic Detokenize builder with application/json body
func NewDetokenizeRequest(server string, params *DetokenizeParams, body DetokenizeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDetokenizeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDetokenizeRequestWithBody generates requests for Detokenize with any type of body
func NewDetokenizeRequestWithBody(server string, params *DetokenizeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/detokenize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-user-access-token", runtime.ParamLocationHeader, params.XUserAccessToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-user-access-token", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-spt-token", runtime.ParamLocationHeader, params.XSptToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-spt-token", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "x-spt-forward-to", runtime.ParamLocationHeader, params.XSptForwardTo)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-spt-forward-to", headerParam2)

	}

	return req, nil
}

// NewGetApiKeysRequest generates requests for GetApiKeys
func NewGetApiKeysRequest(server string, params *GetApiKeysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pointer != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pointer", runtime.ParamLocationQuery, *params.Pointer); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TopAgencyIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "topAgencyIds", runtime.ParamLocationQuery, *params.TopAgencyIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "userIds", runtime.ParamLocationQuery, *params.UserIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-user-access-token", runtime.ParamLocationHeader, params.XUserAccessToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-user-access-token", headerParam0)

	}

	return req, nil
}

// NewCreateApiKeyRequest calls the generic CreateApiKey builder with application/json body
func NewCreateApiKeyRequest(server string, params *CreateApiKeyParams, body CreateApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApiKeyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateApiKeyRequestWithBody generates requests for CreateApiKey with any type of body
func NewCreateApiKeyRequestWithBody(server string, params *CreateApiKeyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-user-access-token", runtime.ParamLocationHeader, params.XUserAccessToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-user-access-token", headerParam0)

	}

	return req, nil
}

// NewGetApiKeyRequest generates requests for GetApiKey
func NewGetApiKeyRequest(server string, apiKey ApiKeyInPath, params *GetApiKeyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiKey", runtime.ParamLocationPath, apiKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-user-access-token", runtime.ParamLocationHeader, params.XUserAccessToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-user-access-token", headerParam0)

	}

	return req, nil
}

// NewPatchApiKeyRequest calls the generic PatchApiKey builder with application/json body
func NewPatchApiKeyRequest(server string, apiKey ApiKeyInPath, params *PatchApiKeyParams, body PatchApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiKeyRequestWithBody(server, apiKey, params, "application/json", bodyReader)
}

// NewPatchApiKeyRequestWithBody generates requests for PatchApiKey with any type of body
func NewPatchApiKeyRequestWithBody(server string, apiKey ApiKeyInPath, params *PatchApiKeyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiKey", runtime.ParamLocationPath, apiKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-user-access-token", runtime.ParamLocationHeader, params.XUserAccessToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-user-access-token", headerParam0)

	}

	return req, nil
}

// NewGetOpenApiJsonRequest generates requests for GetOpenApiJson
func NewGetOpenApiJsonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openapi.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTokenizeRequest calls the generic Tokenize builder with application/json body
func NewTokenizeRequest(server string, params *TokenizeParams, body TokenizeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTokenizeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewTokenizeRequestWithBody generates requests for Tokenize with any type of body
func NewTokenizeRequestWithBody(server string, params *TokenizeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-spt-api-key", runtime.ParamLocationHeader, params.XSptApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-spt-api-key", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ZabbixWithResponse request
	ZabbixWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ZabbixResponse, error)

	// ConvertTokenToBookingDotComWithBodyWithResponse request with any body
	ConvertTokenToBookingDotComWithBodyWithResponse(ctx context.Context, params *ConvertTokenToBookingDotComParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertTokenToBookingDotComResponse, error)

	ConvertTokenToBookingDotComWithResponse(ctx context.Context, params *ConvertTokenToBookingDotComParams, body ConvertTokenToBookingDotComJSONRequestBody, reqEditors ...RequestEditorFn) (*ConvertTokenToBookingDotComResponse, error)

	// DetokenizeWithBodyWithResponse request with any body
	DetokenizeWithBodyWithResponse(ctx context.Context, params *DetokenizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DetokenizeResponse, error)

	DetokenizeWithResponse(ctx context.Context, params *DetokenizeParams, body DetokenizeJSONRequestBody, reqEditors ...RequestEditorFn) (*DetokenizeResponse, error)

	// GetApiKeysWithResponse request
	GetApiKeysWithResponse(ctx context.Context, params *GetApiKeysParams, reqEditors ...RequestEditorFn) (*GetApiKeysResponse, error)

	// CreateApiKeyWithBodyWithResponse request with any body
	CreateApiKeyWithBodyWithResponse(ctx context.Context, params *CreateApiKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiKeyResponse, error)

	CreateApiKeyWithResponse(ctx context.Context, params *CreateApiKeyParams, body CreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiKeyResponse, error)

	// GetApiKeyWithResponse request
	GetApiKeyWithResponse(ctx context.Context, apiKey ApiKeyInPath, params *GetApiKeyParams, reqEditors ...RequestEditorFn) (*GetApiKeyResponse, error)

	// PatchApiKeyWithBodyWithResponse request with any body
	PatchApiKeyWithBodyWithResponse(ctx context.Context, apiKey ApiKeyInPath, params *PatchApiKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiKeyResponse, error)

	PatchApiKeyWithResponse(ctx context.Context, apiKey ApiKeyInPath, params *PatchApiKeyParams, body PatchApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiKeyResponse, error)

	// GetOpenApiJsonWithResponse request
	GetOpenApiJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenApiJsonResponse, error)

	// TokenizeWithBodyWithResponse request with any body
	TokenizeWithBodyWithResponse(ctx context.Context, params *TokenizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenizeResponse, error)

	TokenizeWithResponse(ctx context.Context, params *TokenizeParams, body TokenizeJSONRequestBody, reqEditors ...RequestEditorFn) (*TokenizeResponse, error)
}

type ZabbixResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ZabbixResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ZabbixResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConvertTokenToBookingDotComResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		CardVaultToken string   `json:"cardVaultToken"`
		ThreeDs        *ThreeDs `json:"threeDs,omitempty"`
	}
	JSON404 *ErrorMessage
}

// Status returns HTTPResponse.Status
func (r ConvertTokenToBookingDotComResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConvertTokenToBookingDotComResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DetokenizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorMessage
}

// Status returns HTTPResponse.Status
func (r DetokenizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DetokenizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KeyListResponse
}

// Status returns HTTPResponse.Status
func (r GetApiKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreatedKeyResponse
}

// Status returns HTTPResponse.Status
func (r CreateApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleApiKeyResponse
}

// Status returns HTTPResponse.Status
func (r GetApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenApiJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetOpenApiJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenApiJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TokenizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TokenResponse
}

// Status returns HTTPResponse.Status
func (r TokenizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TokenizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ZabbixWithResponse request returning *ZabbixResponse
func (c *ClientWithResponses) ZabbixWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ZabbixResponse, error) {
	rsp, err := c.Zabbix(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseZabbixResponse(rsp)
}

// ConvertTokenToBookingDotComWithBodyWithResponse request with arbitrary body returning *ConvertTokenToBookingDotComResponse
func (c *ClientWithResponses) ConvertTokenToBookingDotComWithBodyWithResponse(ctx context.Context, params *ConvertTokenToBookingDotComParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertTokenToBookingDotComResponse, error) {
	rsp, err := c.ConvertTokenToBookingDotComWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertTokenToBookingDotComResponse(rsp)
}

func (c *ClientWithResponses) ConvertTokenToBookingDotComWithResponse(ctx context.Context, params *ConvertTokenToBookingDotComParams, body ConvertTokenToBookingDotComJSONRequestBody, reqEditors ...RequestEditorFn) (*ConvertTokenToBookingDotComResponse, error) {
	rsp, err := c.ConvertTokenToBookingDotCom(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertTokenToBookingDotComResponse(rsp)
}

// DetokenizeWithBodyWithResponse request with arbitrary body returning *DetokenizeResponse
func (c *ClientWithResponses) DetokenizeWithBodyWithResponse(ctx context.Context, params *DetokenizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DetokenizeResponse, error) {
	rsp, err := c.DetokenizeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDetokenizeResponse(rsp)
}

func (c *ClientWithResponses) DetokenizeWithResponse(ctx context.Context, params *DetokenizeParams, body DetokenizeJSONRequestBody, reqEditors ...RequestEditorFn) (*DetokenizeResponse, error) {
	rsp, err := c.Detokenize(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDetokenizeResponse(rsp)
}

// GetApiKeysWithResponse request returning *GetApiKeysResponse
func (c *ClientWithResponses) GetApiKeysWithResponse(ctx context.Context, params *GetApiKeysParams, reqEditors ...RequestEditorFn) (*GetApiKeysResponse, error) {
	rsp, err := c.GetApiKeys(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKeysResponse(rsp)
}

// CreateApiKeyWithBodyWithResponse request with arbitrary body returning *CreateApiKeyResponse
func (c *ClientWithResponses) CreateApiKeyWithBodyWithResponse(ctx context.Context, params *CreateApiKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiKeyResponse, error) {
	rsp, err := c.CreateApiKeyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiKeyResponse(rsp)
}

func (c *ClientWithResponses) CreateApiKeyWithResponse(ctx context.Context, params *CreateApiKeyParams, body CreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiKeyResponse, error) {
	rsp, err := c.CreateApiKey(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiKeyResponse(rsp)
}

// GetApiKeyWithResponse request returning *GetApiKeyResponse
func (c *ClientWithResponses) GetApiKeyWithResponse(ctx context.Context, apiKey ApiKeyInPath, params *GetApiKeyParams, reqEditors ...RequestEditorFn) (*GetApiKeyResponse, error) {
	rsp, err := c.GetApiKey(ctx, apiKey, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKeyResponse(rsp)
}

// PatchApiKeyWithBodyWithResponse request with arbitrary body returning *PatchApiKeyResponse
func (c *ClientWithResponses) PatchApiKeyWithBodyWithResponse(ctx context.Context, apiKey ApiKeyInPath, params *PatchApiKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiKeyResponse, error) {
	rsp, err := c.PatchApiKeyWithBody(ctx, apiKey, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiKeyResponse(rsp)
}

func (c *ClientWithResponses) PatchApiKeyWithResponse(ctx context.Context, apiKey ApiKeyInPath, params *PatchApiKeyParams, body PatchApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiKeyResponse, error) {
	rsp, err := c.PatchApiKey(ctx, apiKey, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiKeyResponse(rsp)
}

// GetOpenApiJsonWithResponse request returning *GetOpenApiJsonResponse
func (c *ClientWithResponses) GetOpenApiJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenApiJsonResponse, error) {
	rsp, err := c.GetOpenApiJson(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenApiJsonResponse(rsp)
}

// TokenizeWithBodyWithResponse request with arbitrary body returning *TokenizeResponse
func (c *ClientWithResponses) TokenizeWithBodyWithResponse(ctx context.Context, params *TokenizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenizeResponse, error) {
	rsp, err := c.TokenizeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenizeResponse(rsp)
}

func (c *ClientWithResponses) TokenizeWithResponse(ctx context.Context, params *TokenizeParams, body TokenizeJSONRequestBody, reqEditors ...RequestEditorFn) (*TokenizeResponse, error) {
	rsp, err := c.Tokenize(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenizeResponse(rsp)
}

// ParseZabbixResponse parses an HTTP response from a ZabbixWithResponse call
func ParseZabbixResponse(rsp *http.Response) (*ZabbixResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ZabbixResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseConvertTokenToBookingDotComResponse parses an HTTP response from a ConvertTokenToBookingDotComWithResponse call
func ParseConvertTokenToBookingDotComResponse(rsp *http.Response) (*ConvertTokenToBookingDotComResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConvertTokenToBookingDotComResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			CardVaultToken string   `json:"cardVaultToken"`
			ThreeDs        *ThreeDs `json:"threeDs,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDetokenizeResponse parses an HTTP response from a DetokenizeWithResponse call
func ParseDetokenizeResponse(rsp *http.Response) (*DetokenizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DetokenizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetApiKeysResponse parses an HTTP response from a GetApiKeysWithResponse call
func ParseGetApiKeysResponse(rsp *http.Response) (*GetApiKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KeyListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApiKeyResponse parses an HTTP response from a CreateApiKeyWithResponse call
func ParseCreateApiKeyResponse(rsp *http.Response) (*CreateApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreatedKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetApiKeyResponse parses an HTTP response from a GetApiKeyWithResponse call
func ParseGetApiKeyResponse(rsp *http.Response) (*GetApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleApiKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchApiKeyResponse parses an HTTP response from a PatchApiKeyWithResponse call
func ParsePatchApiKeyResponse(rsp *http.Response) (*PatchApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOpenApiJsonResponse parses an HTTP response from a GetOpenApiJsonWithResponse call
func ParseGetOpenApiJsonResponse(rsp *http.Response) (*GetOpenApiJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenApiJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTokenizeResponse parses an HTTP response from a TokenizeWithResponse call
func ParseTokenizeResponse(rsp *http.Response) (*TokenizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TokenizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
