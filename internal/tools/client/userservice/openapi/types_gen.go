// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"time"
)

// Defines values for AllowViaResourceType.
const (
	AllowViaResourceTypePolicy     AllowViaResourceType = "policy"
	AllowViaResourceTypeUser       AllowViaResourceType = "user"
	AllowViaResourceTypeUserPolicy AllowViaResourceType = "user.policy"
)

// Defines values for AuthPartialResponseNextStep.
const (
	AuthPartialResponseNextStepChangePassword AuthPartialResponseNextStep = "ChangePassword"
	AuthPartialResponseNextStepFinish         AuthPartialResponseNextStep = "Finish"
	AuthPartialResponseNextStepRecaptcha2     AuthPartialResponseNextStep = "Recaptcha2"
	AuthPartialResponseNextStepTfa            AuthPartialResponseNextStep = "Tfa"
)

// Defines values for AuthPartialResponseTfaNextStep.
const (
	AuthPartialResponseTfaNextStepChangePassword AuthPartialResponseTfaNextStep = "ChangePassword"
	AuthPartialResponseTfaNextStepFinish         AuthPartialResponseTfaNextStep = "Finish"
	AuthPartialResponseTfaNextStepRecaptcha2     AuthPartialResponseTfaNextStep = "Recaptcha2"
	AuthPartialResponseTfaNextStepTfa            AuthPartialResponseTfaNextStep = "Tfa"
)

// Defines values for UserLevelCode.
const (
	Agency    UserLevelCode = "agency"
	Titanium  UserLevelCode = "titanium"
	TopAgency UserLevelCode = "top-agency"
)

// Defines values for GetPermissionsAvailableParamsCodeMatch.
const (
	GetPermissionsAvailableParamsCodeMatchExact   GetPermissionsAvailableParamsCodeMatch = "exact"
	GetPermissionsAvailableParamsCodeMatchPartial GetPermissionsAvailableParamsCodeMatch = "partial"
)

// Defines values for GetPermissionPoliciesParamsAgencyIdMatch.
const (
	GetPermissionPoliciesParamsAgencyIdMatchDirect    GetPermissionPoliciesParamsAgencyIdMatch = "direct"
	GetPermissionPoliciesParamsAgencyIdMatchRecursive GetPermissionPoliciesParamsAgencyIdMatch = "recursive"
)

// Defines values for GetPermissionUsersParamsUsernameMatch.
const (
	GetPermissionUsersParamsUsernameMatchExact   GetPermissionUsersParamsUsernameMatch = "exact"
	GetPermissionUsersParamsUsernameMatchPattern GetPermissionUsersParamsUsernameMatch = "pattern"
)

// Defines values for GetPermissionUsersParamsAgencyIdMatch.
const (
	GetPermissionUsersParamsAgencyIdMatchDirect    GetPermissionUsersParamsAgencyIdMatch = "direct"
	GetPermissionUsersParamsAgencyIdMatchRecursive GetPermissionUsersParamsAgencyIdMatch = "recursive"
)

// Defines values for GetPoliciesParamsNameMatch.
const (
	GetPoliciesParamsNameMatchExact   GetPoliciesParamsNameMatch = "exact"
	GetPoliciesParamsNameMatchPattern GetPoliciesParamsNameMatch = "pattern"
)

// Defines values for GetPolicyUsersParamsUsernameMatch.
const (
	GetPolicyUsersParamsUsernameMatchExact   GetPolicyUsersParamsUsernameMatch = "exact"
	GetPolicyUsersParamsUsernameMatchPattern GetPolicyUsersParamsUsernameMatch = "pattern"
)

// Defines values for GetPolicyUsersParamsAgencyIdMatch.
const (
	GetPolicyUsersParamsAgencyIdMatchDirect    GetPolicyUsersParamsAgencyIdMatch = "direct"
	GetPolicyUsersParamsAgencyIdMatchRecursive GetPolicyUsersParamsAgencyIdMatch = "recursive"
)

// Defines values for GetUsersParamsUsernameMatch.
const (
	GetUsersParamsUsernameMatchExact   GetUsersParamsUsernameMatch = "exact"
	GetUsersParamsUsernameMatchPattern GetUsersParamsUsernameMatch = "pattern"
)

// Defines values for GetUsersParamsAgencyIdMatch.
const (
	GetUsersParamsAgencyIdMatchDirect    GetUsersParamsAgencyIdMatch = "direct"
	GetUsersParamsAgencyIdMatchRecursive GetUsersParamsAgencyIdMatch = "recursive"
)

// Defines values for GetUserPermissionsParamsCodeMatch.
const (
	GetUserPermissionsParamsCodeMatchExact   GetUserPermissionsParamsCodeMatch = "exact"
	GetUserPermissionsParamsCodeMatchPartial GetUserPermissionsParamsCodeMatch = "partial"
)

// Defines values for CreateUserPermissionParamsCodeMatch.
const (
	CreateUserPermissionParamsCodeMatchExact   CreateUserPermissionParamsCodeMatch = "exact"
	CreateUserPermissionParamsCodeMatchPartial CreateUserPermissionParamsCodeMatch = "partial"
)

// Defines values for GetUserPermissionsAvailableParamsCodeMatch.
const (
	GetUserPermissionsAvailableParamsCodeMatchExact   GetUserPermissionsAvailableParamsCodeMatch = "exact"
	GetUserPermissionsAvailableParamsCodeMatchPartial GetUserPermissionsAvailableParamsCodeMatch = "partial"
)

// AllowViaResource Reference to some kind of resource
type AllowViaResource struct {
	// Type Type of the resource
	Type AllowViaResourceType `json:"type"`
}

// AllowViaResourceType Type of the resource
type AllowViaResourceType string

// AuthCapabilitiesList List of capabilities supported by the calling party
type AuthCapabilitiesList = []string

// AuthPartialResponse Response to an authentication request when only a partial authentication has been performed
type AuthPartialResponse struct {
	NextStep *AuthPartialResponseNextStep `json:"nextStep,omitempty"`

	// NextStepParams Additional parameters for the next step
	NextStepParams *map[string]interface{} `json:"nextStepParams,omitempty"`

	// Partial Always true. This property can be used to tell a partial response apart from a final response.
	Partial          bool    `json:"partial"`
	PartialAuthToken *string `json:"partialAuthToken,omitempty"`
}

// AuthPartialResponseNextStep defines model for AuthPartialResponse.NextStep.
type AuthPartialResponseNextStep string

// AuthPartialResponseTfa defines model for AuthPartialResponseTfa.
type AuthPartialResponseTfa struct {
	// Cookie Cookie parameters, which can be used to skip the TFA step in the future. The parameter is returned only when the request was made with the TfaCookie capability.
	Cookie *struct {
		Expires *time.Time `json:"expires,omitempty"`

		// Value Can be sent in the "cookie" field during future Tfa step requests.
		Value string `json:"value"`
	} `json:"cookie,omitempty"`
	NextStep *AuthPartialResponseTfaNextStep `json:"nextStep,omitempty"`

	// NextStepParams Additional parameters for the next step
	NextStepParams *map[string]interface{} `json:"nextStepParams,omitempty"`

	// Partial Always true. This property can be used to tell a partial response apart from a final response.
	Partial          bool    `json:"partial"`
	PartialAuthToken *string `json:"partialAuthToken,omitempty"`
}

// AuthPartialResponseTfaNextStep defines model for AuthPartialResponseTfa.NextStep.
type AuthPartialResponseTfaNextStep string

// AuthPermissionQueries A list of permission queries to perform on a successful authentication
type AuthPermissionQueries = []UserPermissionQuery

// AuthResponse Response to an authentication request
type AuthResponse struct {
	// Info Additional informative fields. The client must not depend on any of these values being set
	Info *struct {
		// AgencyId Agency under which the user belongs
		AgencyId *int `json:"agencyId,omitempty"`

		// AgencyName Agency name for the agencyId field
		AgencyName *string `json:"agencyName,omitempty"`

		// TopAgencyId Top-level agency under which the user belongs
		TopAgencyId *int `json:"topAgencyId,omitempty"`

		// TopAgencyName Top-level gency name for the agencyId field
		TopAgencyName *string `json:"topAgencyName,omitempty"`

		// Username Username of the authenticated user
		Username *string `json:"username,omitempty"`
	} `json:"info,omitempty"`

	// PermissionQueryResults Results of the requested permission queries
	PermissionQueryResults *[]UserPermissionQueryResult `json:"permissionQueryResults,omitempty"`

	// SessionId Session ID, if one was requested.
	SessionId *string `json:"sessionId,omitempty"`

	// UserAccessToken User Access Token, if one was requested.
	UserAccessToken *string `json:"userAccessToken,omitempty"`

	// UserId ID of the authenticated user
	UserId *float32 `json:"userId,omitempty"`
}

// AuthResultsList List of requested authentication results.
type AuthResultsList = []string

// AuthStepChangePassword defines model for AuthStepChangePassword.
type AuthStepChangePassword struct {
	// Capabilities List of capabilities supported by the calling party
	Capabilities     *AuthCapabilitiesList `json:"capabilities,omitempty"`
	NewPassword      string                `json:"newPassword"`
	PartialAuthToken string                `json:"partialAuthToken"`
}

// AuthStepFinish defines model for AuthStepFinish.
type AuthStepFinish struct {
	// ForResults List of requested authentication results.
	ForResults       *AuthResultsList `json:"forResults,omitempty"`
	PartialAuthToken string           `json:"partialAuthToken"`
}

// AuthStepRecaptcha2 Recaptcha response parameters
type AuthStepRecaptcha2 struct {
	// Capabilities List of capabilities supported by the calling party
	Capabilities     *AuthCapabilitiesList `json:"capabilities,omitempty"`
	PartialAuthToken string                `json:"partialAuthToken"`

	// Response Response token provided by reCAPTCHA
	Response string `json:"response"`
}

// AuthStepTfa Two-factor authentication step parameters.
type AuthStepTfa = map[string]interface{}

// AuthViaDelegated Authentication request via delegated access
type AuthViaDelegated struct {
	// ForResults List of requested authentication results.
	ForResults *AuthResultsList `json:"forResults,omitempty"`

	// PermissionQueries A list of permission queries to perform on a successful authentication
	PermissionQueries *AuthPermissionQueries `json:"permissionQueries,omitempty"`
	Username          string                 `json:"username"`
}

// AuthViaPassword Authentication request via a username/password pair
type AuthViaPassword struct {
	// Capabilities List of capabilities supported by the calling party
	Capabilities *AuthCapabilitiesList `json:"capabilities,omitempty"`

	// ForResults List of requested authentication results.
	ForResults *AuthResultsList `json:"forResults,omitempty"`
	Password   string           `json:"password"`

	// PermissionQueries A list of permission queries to perform on a successful authentication
	PermissionQueries *AuthPermissionQueries `json:"permissionQueries,omitempty"`
	Username          string                 `json:"username"`
}

// AuthViaSession Authentication request via a session identifier.
type AuthViaSession struct {
	// PermissionQueries A list of permission queries to perform on a successful authentication
	PermissionQueries *AuthPermissionQueries `json:"permissionQueries,omitempty"`

	// SessionId Session identifier
	SessionId string `json:"sessionId"`
}

// BindingScope Describes the scope of a binding
type BindingScope struct {
	// Code Scope code
	Code string `json:"code"`

	// Params Parameters object for the scope. The required schema of ths property is dependent of the code property. The exact schemas can be requested through the /scopes endpoint.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// DelegatedAuthUser Describes a user that is eligible for delegated authentication
type DelegatedAuthUser struct {
	Id       int    `json:"id"`
	Username string `json:"username"`
}

// DeleteSession Request parameters for deleting a session
type DeleteSession struct {
	// SessionId Session identifier
	SessionId string `json:"sessionId"`
}

// Error defines model for Error.
type Error struct {
	Code    string  `json:"code"`
	Message *string `json:"message,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code string `json:"code"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// Permission Description of a permission known to the system
type Permission struct {
	// BindingUserLevels User levels to which this permission can be granted to. An empty value means this permission cannot be granted to anybody.
	BindingUserLevels *[]UserLevelCode `json:"bindingUserLevels,omitempty"`

	// Code Unique permission identifier. A valid permission code consists of 2 or more lower-case alpha-numeric kebab-case component names, separated by periods. The component names should end up describing a hierarchy of namespaces with the last component being the permission itself.
	Code string `json:"code"`

	// Description Human-readable short description of the permission
	Description *string `json:"description,omitempty"`

	// GranterUserLevels User levels who can grant this permission. An empty value means that nobody can grant this permission.
	GranterUserLevels *[]UserLevelCode `json:"granterUserLevels,omitempty"`

	// Meta Additional meta-information. May contain any properties using any types
	Meta *struct {
		// PublicApi Indicates that the permission grants access to an API meant for public consumption
		PublicApi *bool `json:"publicApi,omitempty"`
	} `json:"meta,omitempty"`

	// Scopes List of scope names which can be used for binding this permission. If this field is not set, the permission does not support scoping. If this field has at least one value, the permission must always be bound with a scope.
	Scopes *[]string `json:"scopes,omitempty"`
}

// PermissionAllowedContexts Describes contexts in which some permission is allowed
type PermissionAllowedContexts struct {
	Allowed *[]struct {
		// Context A specific context
		Context *map[string]interface{} `json:"context,omitempty"`

		// Via Chain of resources which caused this context to be allowed
		Via *[]AllowViaResource `json:"via,omitempty"`
	} `json:"allowed,omitempty"`
}

// PermissionAllowedContextsList defines model for PermissionAllowedContextsList.
type PermissionAllowedContextsList struct {
	Results *[]PermissionAllowedContexts `json:"results,omitempty"`
}

// PermissionAllowedContextsQueryList defines model for PermissionAllowedContextsQueryList.
type PermissionAllowedContextsQueryList struct {
	Queries []struct {
		// Code Permission code
		Code string `json:"code"`

		// Explain Fill the "via" properties
		Explain *bool `json:"explain,omitempty"`
	} `json:"queries"`
}

// PermissionAvailableList A list of available permissions objects
type PermissionAvailableList struct {
	// Limit Number of rows to which the response has been limited to
	Limit *int `json:"limit,omitempty"`

	// NextPointer Pointer value for getting the next set of rows
	NextPointer *string `json:"nextPointer,omitempty"`
	Permissions []struct {
		// Permission Description of a permission known to the system
		Permission Permission `json:"permission"`

		// Scopes List of allowed scope named, if the permission is scope-aware
		Scopes *[]string `json:"scopes,omitempty"`
	} `json:"permissions"`
}

// PermissionBinding Relation between a permission and a resource such as a user or a group. The scope property is set if and only if the permission identified by code requires it.
type PermissionBinding struct {
	// Code Permission code
	Code string `json:"code"`

	// Id An identifier for the binding. Only unique within the parent resource.
	Id *string `json:"id,omitempty"`

	// Scope Describes the scope of a binding
	Scope *BindingScope `json:"scope,omitempty"`
}

// PermissionBindingList A list of PermissionBinding objects
type PermissionBindingList struct {
	Permissions []PermissionBinding `json:"permissions"`
}

// PermissionBindingRef Reference to a PermissionBinding object
type PermissionBindingRef struct {
	// Id Binding ID
	Id *string `json:"id,omitempty"`
}

// PermissionList A list of Permission objects
type PermissionList struct {
	Permissions []Permission `json:"permissions"`
}

// PermissionPoliciesResponse A list of policies
type PermissionPoliciesResponse struct {
	Users *[]Policy `json:"users,omitempty"`
}

// PermissionUsersResponse A list of objects
type PermissionUsersResponse struct {
	Users []struct {
		// User A user
		User *User `json:"user,omitempty"`

		// Via List resource chains
		Via *[][]AllowViaResource `json:"via,omitempty"`
	} `json:"users"`
}

// Policy defines model for Policy.
type Policy struct {
	// BindingUserLevels User levels to which this policy can be granted to. Only permissions having the same binding user levels can be added to this policy.
	BindingUserLevels []UserLevelCode `json:"bindingUserLevels"`

	// GranterUserLevels User levels who can grant this policy. Only permissions having the same granter user levels can be added to this policy.
	GranterUserLevels []UserLevelCode `json:"granterUserLevels"`
	Id                *string         `json:"id,omitempty"`

	// Managed Is this a managed policy
	Managed *bool `json:"managed,omitempty"`

	// Name A human-readable name for the policy
	Name PolicyName `json:"name"`

	// OwnerAgencyId The agency which this policy belongs to. Not set for managed policies
	OwnerAgencyId *int `json:"ownerAgencyId,omitempty"`

	// Permissions Permissions in this policy
	Permissions *[]string `json:"permissions,omitempty"`

	// Scopes List of scope codes which can be used for binding this policy. If this field is not set, the policy does not support scoping. If this field has at least one value, the policy must always be bound with a scope. Any scopes specified in this list must also be allowed for every permission in this policy.
	Scopes *[]string `json:"scopes,omitempty"`
}

// PolicyBinding Binding between a policy and a resource
type PolicyBinding struct {
	// Id Identifier for the relation. The value is unique only within a single resource
	Id *string `json:"id,omitempty"`

	// PolicyId The bound policy
	PolicyId *string `json:"policyId,omitempty"`

	// Scope Describes the scope of a binding
	Scope *BindingScope `json:"scope,omitempty"`
}

// PolicyBindingRef defines model for PolicyBindingRef.
type PolicyBindingRef struct {
	// Id Binding ID, unique within the parent resource
	Id string `json:"id"`
}

// PolicyEdit defines model for PolicyEdit.
type PolicyEdit struct {
	// Name A human-readable name for the policy
	Name PolicyName `json:"name"`
}

// PolicyList defines model for PolicyList.
type PolicyList struct {
	Policies *[]Policy `json:"policies,omitempty"`
}

// PolicyName A human-readable name for the policy
type PolicyName = string

// PolicyPermission A permission in policy
type PolicyPermission struct {
	// Code Permission code
	Code string `json:"code"`
}

// PolicyUsersResponse A list of objects
type PolicyUsersResponse struct {
	Users []struct {
		// User A user
		User *User `json:"user,omitempty"`

		// Via List resource chains
		Via *[][]AllowViaResource `json:"via,omitempty"`
	} `json:"users"`
}

// Scope A binding scope definition
type Scope struct {
	// BindingUserLevels User levels which can have a binding with this scope
	BindingUserLevels []UserLevelCode `json:"bindingUserLevels"`

	// BindingsParams A valid JSON schema object describing the expected parameters when binding with this scope
	BindingsParams *map[string]interface{} `json:"bindingsParams,omitempty"`

	// Code Unique code identifying this scope
	Code string `json:"code"`

	// Description Short human-readable description of this scope
	Description *string `json:"description,omitempty"`

	// GranterUserLevels User levels which can create a binding with this scope
	GranterUserLevels []UserLevelCode `json:"granterUserLevels"`
}

// ScopeList List of Scope objects
type ScopeList struct {
	Scopes []Scope `json:"scopes"`
}

// User A user
type User struct {
	AgencyId  *int  `json:"agencyId,omitempty"`
	Id        int   `json:"id"`
	IsApiUser *bool `json:"isApiUser,omitempty"`

	// Lang Language tag consisting of: a 2-character ISO 639-1 language code, followed by a minus sign, followed by a lower-case ISO 3166-1 alpha-2 country code.
	Lang       *string `json:"lang,omitempty"`
	PictureUrl *string `json:"pictureUrl,omitempty"`

	// Timezone The user's preferred timezone, if one has been configured. The value is a timezone name from the tz database: https://www.iana.org/time-zones
	Timezone    *string `json:"timezone,omitempty"`
	TopAgencyId *int    `json:"topAgencyId,omitempty"`
	Username    *string `json:"username,omitempty"`
}

// UserLevel User level definition
type UserLevel struct {
	// Code Code of a user level
	Code *UserLevelCode `json:"code,omitempty"`

	// Description Short description of this user level
	Description *string `json:"description,omitempty"`
}

// UserLevelCode Code of a user level
type UserLevelCode string

// UserNote defines model for UserNote.
type UserNote struct {
	// ActorUserId User that created this note
	ActorUserId *int `json:"actorUserId,omitempty"`

	// Content Note contents
	Content        *string    `json:"content,omitempty"`
	CreateDateTime *time.Time `json:"createDateTime,omitempty"`
	Id             *string    `json:"id,omitempty"`

	// UserId User that this note belongs to
	UserId *int `json:"userId,omitempty"`
}

// UserNoteAdd defines model for UserNoteAdd.
type UserNoteAdd struct {
	Content string `json:"content"`
}

// UserPasswordChange User password change request parameters
type UserPasswordChange struct {
	// CurrentPassword Current password. This value is required when changing the password of the acting user.
	CurrentPassword *string `json:"currentPassword,omitempty"`
	NewPassword     string  `json:"newPassword"`
}

// UserPermissionQuery Query for the allow/deny status of a single permission on a user
type UserPermissionQuery struct {
	// Code Permission code
	Code string `json:"code"`

	// Context Permission checking context. Whether this field is allowed or required depends on each specific permission code. Specific information about permissions and their context requirements can be requested via /permissions
	Context *map[string]interface{} `json:"context,omitempty"`
}

// UserPermissionQueryList A list of UserPermissionQuery objects
type UserPermissionQueryList struct {
	Queries []UserPermissionQuery `json:"queries"`
}

// UserPermissionQueryResult Response to a UserPermissionQuery
type UserPermissionQueryResult struct {
	// Allow Indicated whether the user has the permission
	Allow bool `json:"allow"`

	// AllowVia Chain of resources and bindings which allowed this permission
	AllowVia *[]AllowViaResource `json:"allowVia,omitempty"`

	// Code Permission code (deprecated)
	Code *string `json:"code,omitempty"`

	// TimeToLive Number of seconds for which this result may be cached for. A missing value, or zero, indicates that no caching is allowed.
	TimeToLive *float32 `json:"timeToLive,omitempty"`
}

// UserPermissionQueryResultList A list of UserPermissionQueryResult objects
type UserPermissionQueryResultList struct {
	Results []UserPermissionQueryResult `json:"results"`
}

// UserTfaDisable defines model for UserTfaDisable.
type UserTfaDisable struct {
	// Password Current password. Not required when manipulating other users.
	Password *string `json:"password,omitempty"`
}

// UserTfaEnable defines model for UserTfaEnable.
type UserTfaEnable struct {
	// Code Code generated using the parameters from the configuration step.
	Code string `json:"code"`
}

// UsersResponse A list of User objects
type UsersResponse struct {
	// Limit Number of rows to which the response has been limited
	Limit *int `json:"limit,omitempty"`

	// NextPointer Pointer value for getting the next set of rows
	NextPointer *string `json:"nextPointer,omitempty"`
	Users       []User  `json:"users"`
}

// GetAuthDelegatedUsersParams defines parameters for GetAuthDelegatedUsers.
type GetAuthDelegatedUsersParams struct {
	// Limit Limit the number of returned results to this value
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Pointer Value of nextPointer returned in the response to a previous request
	Pointer *string `form:"pointer,omitempty" json:"pointer,omitempty"`
}

// GetPermissionsAvailableParams defines parameters for GetPermissionsAvailable.
type GetPermissionsAvailableParams struct {
	// Code Query by a permission code
	Code *string `form:"code,omitempty" json:"code,omitempty"`

	// CodeMatch Permission code matching method: - `exact` returns only permissions where the code matches exactly. - `partial` returns permissions where the code partially matches the provided code.
	CodeMatch *GetPermissionsAvailableParamsCodeMatch `form:"codeMatch,omitempty" json:"codeMatch,omitempty"`

	// Limit Limit the number of returned results to this value
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Pointer Value of nextPointer returned in the response to a previous request
	Pointer *string `form:"pointer,omitempty" json:"pointer,omitempty"`
}

// GetPermissionsAvailableParamsCodeMatch defines parameters for GetPermissionsAvailable.
type GetPermissionsAvailableParamsCodeMatch string

// GetPermissionPoliciesParams defines parameters for GetPermissionPolicies.
type GetPermissionPoliciesParams struct {
	// Limit Limit the number of returned results to this value
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Pointer Value of nextPointer returned in the response to a previous request
	Pointer *string `form:"pointer,omitempty" json:"pointer,omitempty"`

	// AgencyId Filter by a specific agency
	AgencyId *float32 `form:"agencyId,omitempty" json:"agencyId,omitempty"`

	// AgencyIdMatch Agency ID matching method: - `direct` returns only users directly under the queried agency - `recursive` returns users from the specified agency and sub-agencies
	AgencyIdMatch *GetPermissionPoliciesParamsAgencyIdMatch `form:"agencyIdMatch,omitempty" json:"agencyIdMatch,omitempty"`

	// Managed Show only managed or non-managed users
	Managed *bool `form:"managed,omitempty" json:"managed,omitempty"`
}

// GetPermissionPoliciesParamsAgencyIdMatch defines parameters for GetPermissionPolicies.
type GetPermissionPoliciesParamsAgencyIdMatch string

// GetPermissionUsersParams defines parameters for GetPermissionUsers.
type GetPermissionUsersParams struct {
	// Limit Limit the number of returned results to this value
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Pointer Value of nextPointer returned in the response to a previous request
	Pointer *string `form:"pointer,omitempty" json:"pointer,omitempty"`

	// Username Query by an username
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// UsernameMatch Username matching method: - `exact` returns only users where the username matches exactly. - `pattern` treats the `username` parameter as a pattern which may contain the wildcard character `*`
	UsernameMatch *GetPermissionUsersParamsUsernameMatch `form:"usernameMatch,omitempty" json:"usernameMatch,omitempty"`

	// AgencyId Filter by a specific agency
	AgencyId *float32 `form:"agencyId,omitempty" json:"agencyId,omitempty"`

	// AgencyIdMatch Agency ID matching method: - `direct` returns only users directly under the queried agency - `recursive` returns users from the specified agency and sub-agencies
	AgencyIdMatch *GetPermissionUsersParamsAgencyIdMatch `form:"agencyIdMatch,omitempty" json:"agencyIdMatch,omitempty"`

	// Managed Show only managed or non-managed users
	Managed *bool `form:"managed,omitempty" json:"managed,omitempty"`
}

// GetPermissionUsersParamsUsernameMatch defines parameters for GetPermissionUsers.
type GetPermissionUsersParamsUsernameMatch string

// GetPermissionUsersParamsAgencyIdMatch defines parameters for GetPermissionUsers.
type GetPermissionUsersParamsAgencyIdMatch string

// GetPoliciesParams defines parameters for GetPolicies.
type GetPoliciesParams struct {
	// AgencyId Display policies owned by this agency. The response will contain only policies owned directly by this agency, not an of it's sub-agencies.
	AgencyId *int `form:"agencyId,omitempty" json:"agencyId,omitempty"`

	// Managed Show only managed policies
	Managed *bool `form:"managed,omitempty" json:"managed,omitempty"`

	// Name Query by an name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// NameMatch Name matching method: - `exact` returns only policies where the name matches exactly. - `pattern` treats the `name` parameter as a pattern which may contain the wildcard character `*`
	NameMatch *GetPoliciesParamsNameMatch `form:"nameMatch,omitempty" json:"nameMatch,omitempty"`

	// Limit Limit the number of returned results to this value
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Pointer Value of nextPointer returned in the response to a previous request
	Pointer *string `form:"pointer,omitempty" json:"pointer,omitempty"`
}

// GetPoliciesParamsNameMatch defines parameters for GetPolicies.
type GetPoliciesParamsNameMatch string

// GetPolicyUsersParams defines parameters for GetPolicyUsers.
type GetPolicyUsersParams struct {
	// Limit Limit the number of returned results to this value
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Pointer Value of nextPointer returned in the response to a previous request
	Pointer *string `form:"pointer,omitempty" json:"pointer,omitempty"`

	// Username Query by an username
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// UsernameMatch Username matching method: - `exact` returns only users where the username matches exactly. - `pattern` treats the `username` parameter as a pattern which may contain the wildcard character `*`
	UsernameMatch *GetPolicyUsersParamsUsernameMatch `form:"usernameMatch,omitempty" json:"usernameMatch,omitempty"`

	// AgencyId Filter by a specific agency
	AgencyId *float32 `form:"agencyId,omitempty" json:"agencyId,omitempty"`

	// AgencyIdMatch Agency ID matching method: - `direct` returns only users directly under the queried agency - `recursive` returns users from the specified agency and sub-agencies
	AgencyIdMatch *GetPolicyUsersParamsAgencyIdMatch `form:"agencyIdMatch,omitempty" json:"agencyIdMatch,omitempty"`

	// Managed Show only managed or non-managed users
	Managed *bool `form:"managed,omitempty" json:"managed,omitempty"`
}

// GetPolicyUsersParamsUsernameMatch defines parameters for GetPolicyUsers.
type GetPolicyUsersParamsUsernameMatch string

// GetPolicyUsersParamsAgencyIdMatch defines parameters for GetPolicyUsers.
type GetPolicyUsersParamsAgencyIdMatch string

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Username Query by an username
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// UsernameMatch Username matching method: - `exact` returns only users where the username matches exactly. - `pattern` treats the `username` parameter as a pattern which may contain the wildcard character `*`
	UsernameMatch *GetUsersParamsUsernameMatch `form:"usernameMatch,omitempty" json:"usernameMatch,omitempty"`

	// AgencyId Filter by a specific agency
	AgencyId *float32 `form:"agencyId,omitempty" json:"agencyId,omitempty"`

	// AgencyIdMatch Agency ID matching method: - `direct` returns only users directly under the queried agency - `recursive` returns users from the specified agency and sub-agencies
	AgencyIdMatch *GetUsersParamsAgencyIdMatch `form:"agencyIdMatch,omitempty" json:"agencyIdMatch,omitempty"`

	// Managed Show only managed or non-managed users
	Managed *bool `form:"managed,omitempty" json:"managed,omitempty"`

	// Limit Limit the number of returned results to this value
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Pointer Value of nextPointer returned in the response to a previous request
	Pointer *string `form:"pointer,omitempty" json:"pointer,omitempty"`

	// Ids Comma-separated user IDs
	Ids *string `form:"ids,omitempty" json:"ids,omitempty"`
}

// GetUsersParamsUsernameMatch defines parameters for GetUsers.
type GetUsersParamsUsernameMatch string

// GetUsersParamsAgencyIdMatch defines parameters for GetUsers.
type GetUsersParamsAgencyIdMatch string

// GetUserNotesParams defines parameters for GetUserNotes.
type GetUserNotesParams struct {
	// Limit Limit the number of returned results to this value
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Pointer Value of nextPointer returned in the response to a previous request
	Pointer *string `form:"pointer,omitempty" json:"pointer,omitempty"`
}

// GetUserPermissionsParams defines parameters for GetUserPermissions.
type GetUserPermissionsParams struct {
	// Code Query by a permission code
	Code *string `form:"code,omitempty" json:"code,omitempty"`

	// CodeMatch Permission code matching method: 												- `exact` returns only permissions where the code matches exactly. 						- `partial` returns permissions where the code partially matches the provided code.
	CodeMatch *GetUserPermissionsParamsCodeMatch `form:"codeMatch,omitempty" json:"codeMatch,omitempty"`
}

// GetUserPermissionsParamsCodeMatch defines parameters for GetUserPermissions.
type GetUserPermissionsParamsCodeMatch string

// CreateUserPermissionParams defines parameters for CreateUserPermission.
type CreateUserPermissionParams struct {
	// Code Query by a permission code
	Code *string `form:"code,omitempty" json:"code,omitempty"`

	// CodeMatch Permission code matching method: 												- `exact` returns only permissions where the code matches exactly. 						- `partial` returns permissions where the code partially matches the provided code.
	CodeMatch *CreateUserPermissionParamsCodeMatch `form:"codeMatch,omitempty" json:"codeMatch,omitempty"`
}

// CreateUserPermissionParamsCodeMatch defines parameters for CreateUserPermission.
type CreateUserPermissionParamsCodeMatch string

// GetUserPermissionsAvailableParams defines parameters for GetUserPermissionsAvailable.
type GetUserPermissionsAvailableParams struct {
	// Code Query by a permission code
	Code *string `form:"code,omitempty" json:"code,omitempty"`

	// CodeMatch Permission code matching method: 												- `exact` returns only permissions where the code matches exactly. 						- `partial` returns permissions where the code partially matches the provided code.
	CodeMatch *GetUserPermissionsAvailableParamsCodeMatch `form:"codeMatch,omitempty" json:"codeMatch,omitempty"`
}

// GetUserPermissionsAvailableParamsCodeMatch defines parameters for GetUserPermissionsAvailable.
type GetUserPermissionsAvailableParamsCodeMatch string

// QueryUserPermissionsParams defines parameters for QueryUserPermissions.
type QueryUserPermissionsParams struct {
	// Explain When true, the response will have the allowVia properties filled
	Explain *bool `form:"explain,omitempty" json:"explain,omitempty"`
}

// PostAuthDelegatedJSONRequestBody defines body for PostAuthDelegated for application/json ContentType.
type PostAuthDelegatedJSONRequestBody = AuthViaDelegated

// AuthViaPasswordJSONRequestBody defines body for AuthViaPassword for application/json ContentType.
type AuthViaPasswordJSONRequestBody = AuthViaPassword

// AuthViaSessionJSONRequestBody defines body for AuthViaSession for application/json ContentType.
type AuthViaSessionJSONRequestBody = AuthViaSession

// AuthStepChangePasswordJSONRequestBody defines body for AuthStepChangePassword for application/json ContentType.
type AuthStepChangePasswordJSONRequestBody = AuthStepChangePassword

// AuthStepFinishJSONRequestBody defines body for AuthStepFinish for application/json ContentType.
type AuthStepFinishJSONRequestBody = AuthStepFinish

// AuthStepRecaptcha2JSONRequestBody defines body for AuthStepRecaptcha2 for application/json ContentType.
type AuthStepRecaptcha2JSONRequestBody = AuthStepRecaptcha2

// AuthStepTfaJSONRequestBody defines body for AuthStepTfa for application/json ContentType.
type AuthStepTfaJSONRequestBody = AuthStepTfa

// CreatePolicyJSONRequestBody defines body for CreatePolicy for application/json ContentType.
type CreatePolicyJSONRequestBody = Policy

// EditPolicyJSONRequestBody defines body for EditPolicy for application/json ContentType.
type EditPolicyJSONRequestBody = PolicyEdit

// AddPolicyPermissionJSONRequestBody defines body for AddPolicyPermission for application/json ContentType.
type AddPolicyPermissionJSONRequestBody = PolicyPermission

// EndSessionJSONRequestBody defines body for EndSession for application/json ContentType.
type EndSessionJSONRequestBody = DeleteSession

// AddUserNoteJSONRequestBody defines body for AddUserNote for application/json ContentType.
type AddUserNoteJSONRequestBody = UserNoteAdd

// SetUserPasswordJSONRequestBody defines body for SetUserPassword for application/json ContentType.
type SetUserPasswordJSONRequestBody = UserPasswordChange

// CreateUserPermissionJSONRequestBody defines body for CreateUserPermission for application/json ContentType.
type CreateUserPermissionJSONRequestBody = PermissionBinding

// CreateUserPermissionsJSONRequestBody defines body for CreateUserPermissions for application/json ContentType.
type CreateUserPermissionsJSONRequestBody = PermissionBindingList

// QueryUserPermissionsContextsJSONRequestBody defines body for QueryUserPermissionsContexts for application/json ContentType.
type QueryUserPermissionsContextsJSONRequestBody = PermissionAllowedContextsQueryList

// QueryUserPermissionsJSONRequestBody defines body for QueryUserPermissions for application/json ContentType.
type QueryUserPermissionsJSONRequestBody = UserPermissionQueryList

// AddUserPolicyJSONRequestBody defines body for AddUserPolicy for application/json ContentType.
type AddUserPolicyJSONRequestBody = PolicyBinding

// DisableUserTfaJSONRequestBody defines body for DisableUserTfa for application/json ContentType.
type DisableUserTfaJSONRequestBody = UserTfaDisable

// PostUsersUserIdTfaEnableJSONRequestBody defines body for PostUsersUserIdTfaEnable for application/json ContentType.
type PostUsersUserIdTfaEnableJSONRequestBody = UserTfaEnable
