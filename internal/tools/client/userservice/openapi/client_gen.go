// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAuthDelegatedWithBody request with any body
	PostAuthDelegatedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthDelegated(ctx context.Context, body PostAuthDelegatedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthDelegatedUsers request
	GetAuthDelegatedUsers(ctx context.Context, params *GetAuthDelegatedUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthViaPasswordWithBody request with any body
	AuthViaPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthViaPassword(ctx context.Context, body AuthViaPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthViaSessionWithBody request with any body
	AuthViaSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthViaSession(ctx context.Context, body AuthViaSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthStepChangePasswordWithBody request with any body
	AuthStepChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthStepChangePassword(ctx context.Context, body AuthStepChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthStepFinishWithBody request with any body
	AuthStepFinishWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthStepFinish(ctx context.Context, body AuthStepFinishJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthStepRecaptcha2WithBody request with any body
	AuthStepRecaptcha2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthStepRecaptcha2(ctx context.Context, body AuthStepRecaptcha2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthStepTfaWithBody request with any body
	AuthStepTfaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthStepTfa(ctx context.Context, body AuthStepTfaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenapiJson request
	GetOpenapiJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPasswordRules request
	GetPasswordRules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissions request
	GetPermissions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissionsAvailable request
	GetPermissionsAvailable(ctx context.Context, params *GetPermissionsAvailableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissionPolicies request
	GetPermissionPolicies(ctx context.Context, permissionCode string, params *GetPermissionPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissionUsers request
	GetPermissionUsers(ctx context.Context, permissionCode string, params *GetPermissionUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicies request
	GetPolicies(ctx context.Context, params *GetPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePolicyWithBody request with any body
	CreatePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePolicy(ctx context.Context, body CreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePolicy request
	DeletePolicy(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicy request
	GetPolicy(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditPolicyWithBody request with any body
	EditPolicyWithBody(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditPolicy(ctx context.Context, policyId string, body EditPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicyPermissions request
	GetPolicyPermissions(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPolicyPermissionWithBody request with any body
	AddPolicyPermissionWithBody(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPolicyPermission(ctx context.Context, policyId string, body AddPolicyPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicyPermissionsAvailable request
	GetPolicyPermissionsAvailable(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePolicyPermission request
	DeletePolicyPermission(ctx context.Context, policyId string, permissionCode string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicyUsers request
	GetPolicyUsers(ctx context.Context, policyId string, params *GetPolicyUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScopes request
	GetScopes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndSessionWithBody request with any body
	EndSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndSession(ctx context.Context, body EndSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserLevels request
	GetUserLevels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserNotes request
	GetUserNotes(ctx context.Context, userId int, params *GetUserNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddUserNoteWithBody request with any body
	AddUserNoteWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddUserNote(ctx context.Context, userId int, body AddUserNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetUserPasswordWithBody request with any body
	SetUserPasswordWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetUserPassword(ctx context.Context, userId int, body SetUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserPermissions request
	GetUserPermissions(ctx context.Context, userId int, params *GetUserPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserPermissionWithBody request with any body
	CreateUserPermissionWithBody(ctx context.Context, userId int, params *CreateUserPermissionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserPermission(ctx context.Context, userId int, params *CreateUserPermissionParams, body CreateUserPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserPermissionsAvailable request
	GetUserPermissionsAvailable(ctx context.Context, userId int, params *GetUserPermissionsAvailableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserPermissionsWithBody request with any body
	CreateUserPermissionsWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserPermissions(ctx context.Context, userId int, body CreateUserPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryUserPermissionsContextsWithBody request with any body
	QueryUserPermissionsContextsWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryUserPermissionsContexts(ctx context.Context, userId int, body QueryUserPermissionsContextsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryUserPermissionsWithBody request with any body
	QueryUserPermissionsWithBody(ctx context.Context, userId int, params *QueryUserPermissionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryUserPermissions(ctx context.Context, userId int, params *QueryUserPermissionsParams, body QueryUserPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveUserPermission request
	RemoveUserPermission(ctx context.Context, userId int, userPermissionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserPermission request
	GetUserPermission(ctx context.Context, userId int, userPermissionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserPolicies request
	GetUserPolicies(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddUserPolicyWithBody request with any body
	AddUserPolicyWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddUserPolicy(ctx context.Context, userId int, body AddUserPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserPoliciesAvailable request
	GetUserPoliciesAvailable(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveUserPolicy request
	RemoveUserPolicy(ctx context.Context, userId int, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserTfaStatus request
	GetUserTfaStatus(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DisableUserTfaWithBody request with any body
	DisableUserTfaWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DisableUserTfa(ctx context.Context, userId int, body DisableUserTfaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersUserIdTfaEnableWithBody request with any body
	PostUsersUserIdTfaEnableWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersUserIdTfaEnable(ctx context.Context, userId int, body PostUsersUserIdTfaEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetupUserTfa request
	SetupUserTfa(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAuthDelegatedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthDelegatedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthDelegated(ctx context.Context, body PostAuthDelegatedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthDelegatedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthDelegatedUsers(ctx context.Context, params *GetAuthDelegatedUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthDelegatedUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthViaPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthViaPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthViaPassword(ctx context.Context, body AuthViaPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthViaPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthViaSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthViaSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthViaSession(ctx context.Context, body AuthViaSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthViaSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthStepChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthStepChangePasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthStepChangePassword(ctx context.Context, body AuthStepChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthStepChangePasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthStepFinishWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthStepFinishRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthStepFinish(ctx context.Context, body AuthStepFinishJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthStepFinishRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthStepRecaptcha2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthStepRecaptcha2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthStepRecaptcha2(ctx context.Context, body AuthStepRecaptcha2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthStepRecaptcha2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthStepTfaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthStepTfaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthStepTfa(ctx context.Context, body AuthStepTfaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthStepTfaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenapiJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenapiJsonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPasswordRules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPasswordRulesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissionsAvailable(ctx context.Context, params *GetPermissionsAvailableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionsAvailableRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissionPolicies(ctx context.Context, permissionCode string, params *GetPermissionPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionPoliciesRequest(c.Server, permissionCode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissionUsers(ctx context.Context, permissionCode string, params *GetPermissionUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionUsersRequest(c.Server, permissionCode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicies(ctx context.Context, params *GetPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePolicy(ctx context.Context, body CreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePolicy(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePolicyRequest(c.Server, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicy(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicyRequest(c.Server, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditPolicyWithBody(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditPolicyRequestWithBody(c.Server, policyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditPolicy(ctx context.Context, policyId string, body EditPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditPolicyRequest(c.Server, policyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicyPermissions(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicyPermissionsRequest(c.Server, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPolicyPermissionWithBody(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPolicyPermissionRequestWithBody(c.Server, policyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPolicyPermission(ctx context.Context, policyId string, body AddPolicyPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPolicyPermissionRequest(c.Server, policyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicyPermissionsAvailable(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicyPermissionsAvailableRequest(c.Server, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePolicyPermission(ctx context.Context, policyId string, permissionCode string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePolicyPermissionRequest(c.Server, policyId, permissionCode)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicyUsers(ctx context.Context, policyId string, params *GetPolicyUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicyUsersRequest(c.Server, policyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScopes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScopesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndSession(ctx context.Context, body EndSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserLevels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserLevelsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserNotes(ctx context.Context, userId int, params *GetUserNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserNotesRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserNoteWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserNoteRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserNote(ctx context.Context, userId int, body AddUserNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserNoteRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetUserPasswordWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetUserPasswordRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetUserPassword(ctx context.Context, userId int, body SetUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetUserPasswordRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserPermissions(ctx context.Context, userId int, params *GetUserPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserPermissionsRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserPermissionWithBody(ctx context.Context, userId int, params *CreateUserPermissionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserPermissionRequestWithBody(c.Server, userId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserPermission(ctx context.Context, userId int, params *CreateUserPermissionParams, body CreateUserPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserPermissionRequest(c.Server, userId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserPermissionsAvailable(ctx context.Context, userId int, params *GetUserPermissionsAvailableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserPermissionsAvailableRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserPermissionsWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserPermissionsRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserPermissions(ctx context.Context, userId int, body CreateUserPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserPermissionsRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUserPermissionsContextsWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUserPermissionsContextsRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUserPermissionsContexts(ctx context.Context, userId int, body QueryUserPermissionsContextsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUserPermissionsContextsRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUserPermissionsWithBody(ctx context.Context, userId int, params *QueryUserPermissionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUserPermissionsRequestWithBody(c.Server, userId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUserPermissions(ctx context.Context, userId int, params *QueryUserPermissionsParams, body QueryUserPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUserPermissionsRequest(c.Server, userId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserPermission(ctx context.Context, userId int, userPermissionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserPermissionRequest(c.Server, userId, userPermissionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserPermission(ctx context.Context, userId int, userPermissionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserPermissionRequest(c.Server, userId, userPermissionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserPolicies(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserPoliciesRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserPolicyWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserPolicyRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserPolicy(ctx context.Context, userId int, body AddUserPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserPolicyRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserPoliciesAvailable(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserPoliciesAvailableRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserPolicy(ctx context.Context, userId int, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserPolicyRequest(c.Server, userId, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserTfaStatus(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserTfaStatusRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisableUserTfaWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisableUserTfaRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisableUserTfa(ctx context.Context, userId int, body DisableUserTfaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisableUserTfaRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersUserIdTfaEnableWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersUserIdTfaEnableRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersUserIdTfaEnable(ctx context.Context, userId int, body PostUsersUserIdTfaEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersUserIdTfaEnableRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupUserTfa(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupUserTfaRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAuthDelegatedRequest calls the generic PostAuthDelegated builder with application/json body
func NewPostAuthDelegatedRequest(server string, body PostAuthDelegatedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthDelegatedRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthDelegatedRequestWithBody generates requests for PostAuthDelegated with any type of body
func NewPostAuthDelegatedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/delegated")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthDelegatedUsersRequest generates requests for GetAuthDelegatedUsers
func NewGetAuthDelegatedUsersRequest(server string, params *GetAuthDelegatedUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/delegated/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pointer != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pointer", runtime.ParamLocationQuery, *params.Pointer); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthViaPasswordRequest calls the generic AuthViaPassword builder with application/json body
func NewAuthViaPasswordRequest(server string, body AuthViaPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthViaPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthViaPasswordRequestWithBody generates requests for AuthViaPassword with any type of body
func NewAuthViaPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthViaSessionRequest calls the generic AuthViaSession builder with application/json body
func NewAuthViaSessionRequest(server string, body AuthViaSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthViaSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthViaSessionRequestWithBody generates requests for AuthViaSession with any type of body
func NewAuthViaSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/session")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthStepChangePasswordRequest calls the generic AuthStepChangePassword builder with application/json body
func NewAuthStepChangePasswordRequest(server string, body AuthStepChangePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthStepChangePasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthStepChangePasswordRequestWithBody generates requests for AuthStepChangePassword with any type of body
func NewAuthStepChangePasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/step/change-password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthStepFinishRequest calls the generic AuthStepFinish builder with application/json body
func NewAuthStepFinishRequest(server string, body AuthStepFinishJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthStepFinishRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthStepFinishRequestWithBody generates requests for AuthStepFinish with any type of body
func NewAuthStepFinishRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/step/finish")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthStepRecaptcha2Request calls the generic AuthStepRecaptcha2 builder with application/json body
func NewAuthStepRecaptcha2Request(server string, body AuthStepRecaptcha2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthStepRecaptcha2RequestWithBody(server, "application/json", bodyReader)
}

// NewAuthStepRecaptcha2RequestWithBody generates requests for AuthStepRecaptcha2 with any type of body
func NewAuthStepRecaptcha2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/step/recaptcha2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthStepTfaRequest calls the generic AuthStepTfa builder with application/json body
func NewAuthStepTfaRequest(server string, body AuthStepTfaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthStepTfaRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthStepTfaRequestWithBody generates requests for AuthStepTfa with any type of body
func NewAuthStepTfaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/step/tfa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOpenapiJsonRequest generates requests for GetOpenapiJson
func NewGetOpenapiJsonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openapi.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPasswordRulesRequest generates requests for GetPasswordRules
func NewGetPasswordRulesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/password-rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPermissionsRequest generates requests for GetPermissions
func NewGetPermissionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPermissionsAvailableRequest generates requests for GetPermissionsAvailable
func NewGetPermissionsAvailableRequest(server string, params *GetPermissionsAvailableParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions-available")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Code != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, *params.Code); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CodeMatch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "codeMatch", runtime.ParamLocationQuery, *params.CodeMatch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pointer != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pointer", runtime.ParamLocationQuery, *params.Pointer); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPermissionPoliciesRequest generates requests for GetPermissionPolicies
func NewGetPermissionPoliciesRequest(server string, permissionCode string, params *GetPermissionPoliciesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "permissionCode", runtime.ParamLocationPath, permissionCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pointer != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pointer", runtime.ParamLocationQuery, *params.Pointer); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgencyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agencyId", runtime.ParamLocationQuery, *params.AgencyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgencyIdMatch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agencyIdMatch", runtime.ParamLocationQuery, *params.AgencyIdMatch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Managed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "managed", runtime.ParamLocationQuery, *params.Managed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPermissionUsersRequest generates requests for GetPermissionUsers
func NewGetPermissionUsersRequest(server string, permissionCode string, params *GetPermissionUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "permissionCode", runtime.ParamLocationPath, permissionCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pointer != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pointer", runtime.ParamLocationQuery, *params.Pointer); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsernameMatch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "usernameMatch", runtime.ParamLocationQuery, *params.UsernameMatch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgencyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agencyId", runtime.ParamLocationQuery, *params.AgencyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgencyIdMatch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agencyIdMatch", runtime.ParamLocationQuery, *params.AgencyIdMatch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Managed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "managed", runtime.ParamLocationQuery, *params.Managed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPoliciesRequest generates requests for GetPolicies
func NewGetPoliciesRequest(server string, params *GetPoliciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AgencyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agencyId", runtime.ParamLocationQuery, *params.AgencyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Managed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "managed", runtime.ParamLocationQuery, *params.Managed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameMatch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nameMatch", runtime.ParamLocationQuery, *params.NameMatch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pointer != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pointer", runtime.ParamLocationQuery, *params.Pointer); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePolicyRequest calls the generic CreatePolicy builder with application/json body
func NewCreatePolicyRequest(server string, body CreatePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePolicyRequestWithBody generates requests for CreatePolicy with any type of body
func NewCreatePolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePolicyRequest generates requests for DeletePolicy
func NewDeletePolicyRequest(server string, policyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPolicyRequest generates requests for GetPolicy
func NewGetPolicyRequest(server string, policyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditPolicyRequest calls the generic EditPolicy builder with application/json body
func NewEditPolicyRequest(server string, policyId string, body EditPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditPolicyRequestWithBody(server, policyId, "application/json", bodyReader)
}

// NewEditPolicyRequestWithBody generates requests for EditPolicy with any type of body
func NewEditPolicyRequestWithBody(server string, policyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPolicyPermissionsRequest generates requests for GetPolicyPermissions
func NewGetPolicyPermissionsRequest(server string, policyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s/permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPolicyPermissionRequest calls the generic AddPolicyPermission builder with application/json body
func NewAddPolicyPermissionRequest(server string, policyId string, body AddPolicyPermissionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPolicyPermissionRequestWithBody(server, policyId, "application/json", bodyReader)
}

// NewAddPolicyPermissionRequestWithBody generates requests for AddPolicyPermission with any type of body
func NewAddPolicyPermissionRequestWithBody(server string, policyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s/permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPolicyPermissionsAvailableRequest generates requests for GetPolicyPermissionsAvailable
func NewGetPolicyPermissionsAvailableRequest(server string, policyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s/permissions-available", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePolicyPermissionRequest generates requests for DeletePolicyPermission
func NewDeletePolicyPermissionRequest(server string, policyId string, permissionCode string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "permissionCode", runtime.ParamLocationPath, permissionCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s/permissions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPolicyUsersRequest generates requests for GetPolicyUsers
func NewGetPolicyUsersRequest(server string, policyId string, params *GetPolicyUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pointer != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pointer", runtime.ParamLocationQuery, *params.Pointer); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsernameMatch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "usernameMatch", runtime.ParamLocationQuery, *params.UsernameMatch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgencyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agencyId", runtime.ParamLocationQuery, *params.AgencyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgencyIdMatch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agencyIdMatch", runtime.ParamLocationQuery, *params.AgencyIdMatch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Managed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "managed", runtime.ParamLocationQuery, *params.Managed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScopesRequest generates requests for GetScopes
func NewGetScopesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scopes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndSessionRequest calls the generic EndSession builder with application/json body
func NewEndSessionRequest(server string, body EndSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewEndSessionRequestWithBody generates requests for EndSession with any type of body
func NewEndSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/end")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserLevelsRequest generates requests for GetUserLevels
func NewGetUserLevelsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-levels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsernameMatch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "usernameMatch", runtime.ParamLocationQuery, *params.UsernameMatch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgencyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agencyId", runtime.ParamLocationQuery, *params.AgencyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgencyIdMatch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agencyIdMatch", runtime.ParamLocationQuery, *params.AgencyIdMatch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Managed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "managed", runtime.ParamLocationQuery, *params.Managed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pointer != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pointer", runtime.ParamLocationQuery, *params.Pointer); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserNotesRequest generates requests for GetUserNotes
func NewGetUserNotesRequest(server string, userId int, params *GetUserNotesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pointer != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pointer", runtime.ParamLocationQuery, *params.Pointer); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddUserNoteRequest calls the generic AddUserNote builder with application/json body
func NewAddUserNoteRequest(server string, userId int, body AddUserNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddUserNoteRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewAddUserNoteRequestWithBody generates requests for AddUserNote with any type of body
func NewAddUserNoteRequestWithBody(server string, userId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetUserPasswordRequest calls the generic SetUserPassword builder with application/json body
func NewSetUserPasswordRequest(server string, userId int, body SetUserPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetUserPasswordRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewSetUserPasswordRequestWithBody generates requests for SetUserPassword with any type of body
func NewSetUserPasswordRequestWithBody(server string, userId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserPermissionsRequest generates requests for GetUserPermissions
func NewGetUserPermissionsRequest(server string, userId int, params *GetUserPermissionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Code != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, *params.Code); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CodeMatch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "codeMatch", runtime.ParamLocationQuery, *params.CodeMatch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserPermissionRequest calls the generic CreateUserPermission builder with application/json body
func NewCreateUserPermissionRequest(server string, userId int, params *CreateUserPermissionParams, body CreateUserPermissionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserPermissionRequestWithBody(server, userId, params, "application/json", bodyReader)
}

// NewCreateUserPermissionRequestWithBody generates requests for CreateUserPermission with any type of body
func NewCreateUserPermissionRequestWithBody(server string, userId int, params *CreateUserPermissionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Code != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, *params.Code); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CodeMatch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "codeMatch", runtime.ParamLocationQuery, *params.CodeMatch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserPermissionsAvailableRequest generates requests for GetUserPermissionsAvailable
func NewGetUserPermissionsAvailableRequest(server string, userId int, params *GetUserPermissionsAvailableParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/permissions-available", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Code != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, *params.Code); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CodeMatch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "codeMatch", runtime.ParamLocationQuery, *params.CodeMatch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserPermissionsRequest calls the generic CreateUserPermissions builder with application/json body
func NewCreateUserPermissionsRequest(server string, userId int, body CreateUserPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserPermissionsRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewCreateUserPermissionsRequestWithBody generates requests for CreateUserPermissions with any type of body
func NewCreateUserPermissionsRequestWithBody(server string, userId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/permissions/batch", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryUserPermissionsContextsRequest calls the generic QueryUserPermissionsContexts builder with application/json body
func NewQueryUserPermissionsContextsRequest(server string, userId int, body QueryUserPermissionsContextsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryUserPermissionsContextsRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewQueryUserPermissionsContextsRequestWithBody generates requests for QueryUserPermissionsContexts with any type of body
func NewQueryUserPermissionsContextsRequestWithBody(server string, userId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/permissions/contexts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryUserPermissionsRequest calls the generic QueryUserPermissions builder with application/json body
func NewQueryUserPermissionsRequest(server string, userId int, params *QueryUserPermissionsParams, body QueryUserPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryUserPermissionsRequestWithBody(server, userId, params, "application/json", bodyReader)
}

// NewQueryUserPermissionsRequestWithBody generates requests for QueryUserPermissions with any type of body
func NewQueryUserPermissionsRequestWithBody(server string, userId int, params *QueryUserPermissionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/permissions/query", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Explain != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "explain", runtime.ParamLocationQuery, *params.Explain); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveUserPermissionRequest generates requests for RemoveUserPermission
func NewRemoveUserPermissionRequest(server string, userId int, userPermissionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userPermissionId", runtime.ParamLocationPath, userPermissionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/permissions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserPermissionRequest generates requests for GetUserPermission
func NewGetUserPermissionRequest(server string, userId int, userPermissionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userPermissionId", runtime.ParamLocationPath, userPermissionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/permissions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserPoliciesRequest generates requests for GetUserPolicies
func NewGetUserPoliciesRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddUserPolicyRequest calls the generic AddUserPolicy builder with application/json body
func NewAddUserPolicyRequest(server string, userId int, body AddUserPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddUserPolicyRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewAddUserPolicyRequestWithBody generates requests for AddUserPolicy with any type of body
func NewAddUserPolicyRequestWithBody(server string, userId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserPoliciesAvailableRequest generates requests for GetUserPoliciesAvailable
func NewGetUserPoliciesAvailableRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/policies-available", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveUserPolicyRequest generates requests for RemoveUserPolicy
func NewRemoveUserPolicyRequest(server string, userId int, policyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserTfaStatusRequest generates requests for GetUserTfaStatus
func NewGetUserTfaStatusRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/tfa", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDisableUserTfaRequest calls the generic DisableUserTfa builder with application/json body
func NewDisableUserTfaRequest(server string, userId int, body DisableUserTfaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDisableUserTfaRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewDisableUserTfaRequestWithBody generates requests for DisableUserTfa with any type of body
func NewDisableUserTfaRequestWithBody(server string, userId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/tfa/disable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUsersUserIdTfaEnableRequest calls the generic PostUsersUserIdTfaEnable builder with application/json body
func NewPostUsersUserIdTfaEnableRequest(server string, userId int, body PostUsersUserIdTfaEnableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersUserIdTfaEnableRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostUsersUserIdTfaEnableRequestWithBody generates requests for PostUsersUserIdTfaEnable with any type of body
func NewPostUsersUserIdTfaEnableRequestWithBody(server string, userId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/tfa/enable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetupUserTfaRequest generates requests for SetupUserTfa
func NewSetupUserTfaRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/tfa/setup", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAuthDelegatedWithBodyWithResponse request with any body
	PostAuthDelegatedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthDelegatedResponse, error)

	PostAuthDelegatedWithResponse(ctx context.Context, body PostAuthDelegatedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthDelegatedResponse, error)

	// GetAuthDelegatedUsersWithResponse request
	GetAuthDelegatedUsersWithResponse(ctx context.Context, params *GetAuthDelegatedUsersParams, reqEditors ...RequestEditorFn) (*GetAuthDelegatedUsersResponse, error)

	// AuthViaPasswordWithBodyWithResponse request with any body
	AuthViaPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthViaPasswordResponse, error)

	AuthViaPasswordWithResponse(ctx context.Context, body AuthViaPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthViaPasswordResponse, error)

	// AuthViaSessionWithBodyWithResponse request with any body
	AuthViaSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthViaSessionResponse, error)

	AuthViaSessionWithResponse(ctx context.Context, body AuthViaSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthViaSessionResponse, error)

	// AuthStepChangePasswordWithBodyWithResponse request with any body
	AuthStepChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthStepChangePasswordResponse, error)

	AuthStepChangePasswordWithResponse(ctx context.Context, body AuthStepChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthStepChangePasswordResponse, error)

	// AuthStepFinishWithBodyWithResponse request with any body
	AuthStepFinishWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthStepFinishResponse, error)

	AuthStepFinishWithResponse(ctx context.Context, body AuthStepFinishJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthStepFinishResponse, error)

	// AuthStepRecaptcha2WithBodyWithResponse request with any body
	AuthStepRecaptcha2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthStepRecaptcha2Response, error)

	AuthStepRecaptcha2WithResponse(ctx context.Context, body AuthStepRecaptcha2JSONRequestBody, reqEditors ...RequestEditorFn) (*AuthStepRecaptcha2Response, error)

	// AuthStepTfaWithBodyWithResponse request with any body
	AuthStepTfaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthStepTfaResponse, error)

	AuthStepTfaWithResponse(ctx context.Context, body AuthStepTfaJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthStepTfaResponse, error)

	// GetOpenapiJsonWithResponse request
	GetOpenapiJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenapiJsonResponse, error)

	// GetPasswordRulesWithResponse request
	GetPasswordRulesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPasswordRulesResponse, error)

	// GetPermissionsWithResponse request
	GetPermissionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPermissionsResponse, error)

	// GetPermissionsAvailableWithResponse request
	GetPermissionsAvailableWithResponse(ctx context.Context, params *GetPermissionsAvailableParams, reqEditors ...RequestEditorFn) (*GetPermissionsAvailableResponse, error)

	// GetPermissionPoliciesWithResponse request
	GetPermissionPoliciesWithResponse(ctx context.Context, permissionCode string, params *GetPermissionPoliciesParams, reqEditors ...RequestEditorFn) (*GetPermissionPoliciesResponse, error)

	// GetPermissionUsersWithResponse request
	GetPermissionUsersWithResponse(ctx context.Context, permissionCode string, params *GetPermissionUsersParams, reqEditors ...RequestEditorFn) (*GetPermissionUsersResponse, error)

	// GetPoliciesWithResponse request
	GetPoliciesWithResponse(ctx context.Context, params *GetPoliciesParams, reqEditors ...RequestEditorFn) (*GetPoliciesResponse, error)

	// CreatePolicyWithBodyWithResponse request with any body
	CreatePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePolicyResponse, error)

	CreatePolicyWithResponse(ctx context.Context, body CreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePolicyResponse, error)

	// DeletePolicyWithResponse request
	DeletePolicyWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*DeletePolicyResponse, error)

	// GetPolicyWithResponse request
	GetPolicyWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*GetPolicyResponse, error)

	// EditPolicyWithBodyWithResponse request with any body
	EditPolicyWithBodyWithResponse(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditPolicyResponse, error)

	EditPolicyWithResponse(ctx context.Context, policyId string, body EditPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*EditPolicyResponse, error)

	// GetPolicyPermissionsWithResponse request
	GetPolicyPermissionsWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*GetPolicyPermissionsResponse, error)

	// AddPolicyPermissionWithBodyWithResponse request with any body
	AddPolicyPermissionWithBodyWithResponse(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPolicyPermissionResponse, error)

	AddPolicyPermissionWithResponse(ctx context.Context, policyId string, body AddPolicyPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPolicyPermissionResponse, error)

	// GetPolicyPermissionsAvailableWithResponse request
	GetPolicyPermissionsAvailableWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*GetPolicyPermissionsAvailableResponse, error)

	// DeletePolicyPermissionWithResponse request
	DeletePolicyPermissionWithResponse(ctx context.Context, policyId string, permissionCode string, reqEditors ...RequestEditorFn) (*DeletePolicyPermissionResponse, error)

	// GetPolicyUsersWithResponse request
	GetPolicyUsersWithResponse(ctx context.Context, policyId string, params *GetPolicyUsersParams, reqEditors ...RequestEditorFn) (*GetPolicyUsersResponse, error)

	// GetScopesWithResponse request
	GetScopesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetScopesResponse, error)

	// EndSessionWithBodyWithResponse request with any body
	EndSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndSessionResponse, error)

	EndSessionWithResponse(ctx context.Context, body EndSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*EndSessionResponse, error)

	// GetStatusWithResponse request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)

	// GetUserLevelsWithResponse request
	GetUserLevelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserLevelsResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// GetUserNotesWithResponse request
	GetUserNotesWithResponse(ctx context.Context, userId int, params *GetUserNotesParams, reqEditors ...RequestEditorFn) (*GetUserNotesResponse, error)

	// AddUserNoteWithBodyWithResponse request with any body
	AddUserNoteWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUserNoteResponse, error)

	AddUserNoteWithResponse(ctx context.Context, userId int, body AddUserNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUserNoteResponse, error)

	// SetUserPasswordWithBodyWithResponse request with any body
	SetUserPasswordWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetUserPasswordResponse, error)

	SetUserPasswordWithResponse(ctx context.Context, userId int, body SetUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*SetUserPasswordResponse, error)

	// GetUserPermissionsWithResponse request
	GetUserPermissionsWithResponse(ctx context.Context, userId int, params *GetUserPermissionsParams, reqEditors ...RequestEditorFn) (*GetUserPermissionsResponse, error)

	// CreateUserPermissionWithBodyWithResponse request with any body
	CreateUserPermissionWithBodyWithResponse(ctx context.Context, userId int, params *CreateUserPermissionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserPermissionResponse, error)

	CreateUserPermissionWithResponse(ctx context.Context, userId int, params *CreateUserPermissionParams, body CreateUserPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserPermissionResponse, error)

	// GetUserPermissionsAvailableWithResponse request
	GetUserPermissionsAvailableWithResponse(ctx context.Context, userId int, params *GetUserPermissionsAvailableParams, reqEditors ...RequestEditorFn) (*GetUserPermissionsAvailableResponse, error)

	// CreateUserPermissionsWithBodyWithResponse request with any body
	CreateUserPermissionsWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserPermissionsResponse, error)

	CreateUserPermissionsWithResponse(ctx context.Context, userId int, body CreateUserPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserPermissionsResponse, error)

	// QueryUserPermissionsContextsWithBodyWithResponse request with any body
	QueryUserPermissionsContextsWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUserPermissionsContextsResponse, error)

	QueryUserPermissionsContextsWithResponse(ctx context.Context, userId int, body QueryUserPermissionsContextsJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUserPermissionsContextsResponse, error)

	// QueryUserPermissionsWithBodyWithResponse request with any body
	QueryUserPermissionsWithBodyWithResponse(ctx context.Context, userId int, params *QueryUserPermissionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUserPermissionsResponse, error)

	QueryUserPermissionsWithResponse(ctx context.Context, userId int, params *QueryUserPermissionsParams, body QueryUserPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUserPermissionsResponse, error)

	// RemoveUserPermissionWithResponse request
	RemoveUserPermissionWithResponse(ctx context.Context, userId int, userPermissionId string, reqEditors ...RequestEditorFn) (*RemoveUserPermissionResponse, error)

	// GetUserPermissionWithResponse request
	GetUserPermissionWithResponse(ctx context.Context, userId int, userPermissionId string, reqEditors ...RequestEditorFn) (*GetUserPermissionResponse, error)

	// GetUserPoliciesWithResponse request
	GetUserPoliciesWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserPoliciesResponse, error)

	// AddUserPolicyWithBodyWithResponse request with any body
	AddUserPolicyWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUserPolicyResponse, error)

	AddUserPolicyWithResponse(ctx context.Context, userId int, body AddUserPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUserPolicyResponse, error)

	// GetUserPoliciesAvailableWithResponse request
	GetUserPoliciesAvailableWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserPoliciesAvailableResponse, error)

	// RemoveUserPolicyWithResponse request
	RemoveUserPolicyWithResponse(ctx context.Context, userId int, policyId string, reqEditors ...RequestEditorFn) (*RemoveUserPolicyResponse, error)

	// GetUserTfaStatusWithResponse request
	GetUserTfaStatusWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserTfaStatusResponse, error)

	// DisableUserTfaWithBodyWithResponse request with any body
	DisableUserTfaWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DisableUserTfaResponse, error)

	DisableUserTfaWithResponse(ctx context.Context, userId int, body DisableUserTfaJSONRequestBody, reqEditors ...RequestEditorFn) (*DisableUserTfaResponse, error)

	// PostUsersUserIdTfaEnableWithBodyWithResponse request with any body
	PostUsersUserIdTfaEnableWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersUserIdTfaEnableResponse, error)

	PostUsersUserIdTfaEnableWithResponse(ctx context.Context, userId int, body PostUsersUserIdTfaEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersUserIdTfaEnableResponse, error)

	// SetupUserTfaWithResponse request
	SetupUserTfaWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*SetupUserTfaResponse, error)
}

type PostAuthDelegatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostAuthDelegatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthDelegatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthDelegatedUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Actor Describes a user that is eligible for delegated authentication
		Actor *DelegatedAuthUser `json:"actor,omitempty"`

		// Limit Number of rows to which the response has been limited
		Limit *int `json:"limit,omitempty"`

		// NextPointer Pointer value for getting the next set of rows
		NextPointer *string              `json:"nextPointer,omitempty"`
		Users       *[]DelegatedAuthUser `json:"users,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAuthDelegatedUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthDelegatedUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthViaPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AuthViaPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthViaPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthViaSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AuthViaSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthViaSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthStepChangePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthPartialResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AuthStepChangePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthStepChangePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthStepFinishResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AuthStepFinishResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthStepFinishResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthStepRecaptcha2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthPartialResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AuthStepRecaptcha2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthStepRecaptcha2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthStepTfaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthPartialResponseTfa
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AuthStepTfaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthStepTfaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenapiJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetOpenapiJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenapiJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPasswordRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Patterns List of patterns, all of which must match for a password to be valid.
		Patterns *[]string `json:"patterns,omitempty"`

		// Summary Short human-readable summary of the rules
		Summary *string `json:"summary,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPasswordRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPasswordRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionList
}

// Status returns HTTPResponse.Status
func (r GetPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPermissionsAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionAvailableList
}

// Status returns HTTPResponse.Status
func (r GetPermissionsAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionsAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPermissionPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionPoliciesResponse
}

// Status returns HTTPResponse.Status
func (r GetPermissionPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPermissionUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionUsersResponse
}

// Status returns HTTPResponse.Status
func (r GetPermissionUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyList
}

// Status returns HTTPResponse.Status
func (r GetPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// Id Id of the newly-created policy
		Id *string `json:"id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreatePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r GetPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolicyPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionList
}

// Status returns HTTPResponse.Status
func (r GetPolicyPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicyPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPolicyPermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyPermission
	JSON201      *PolicyPermission
	JSON422      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddPolicyPermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPolicyPermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolicyPermissionsAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionList
}

// Status returns HTTPResponse.Status
func (r GetPolicyPermissionsAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicyPermissionsAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePolicyPermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePolicyPermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePolicyPermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolicyUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyUsersResponse
}

// Status returns HTTPResponse.Status
func (r GetPolicyUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicyUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScopeList
}

// Status returns HTTPResponse.Status
func (r GetScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EndSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON500      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserLevelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		UserLevels *[]UserLevel `json:"userLevels,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserLevelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserLevelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsersResponse
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Limit Number of rows to which the response has been limited to
		Limit *int `json:"limit,omitempty"`

		// NextPointer Pointer value for getting the next set of rows
		NextPointer *string     `json:"nextPointer,omitempty"`
		Notes       *[]UserNote `json:"notes,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUserNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddUserNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUserNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetUserPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r SetUserPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetUserPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionBindingList
}

// Status returns HTTPResponse.Status
func (r GetUserPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserPermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionBindingRef
	JSON201      *PermissionBindingRef
	JSON422      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateUserPermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserPermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserPermissionsAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionAvailableList
}

// Status returns HTTPResponse.Status
func (r GetUserPermissionsAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserPermissionsAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Id Binding ID
		Id *string `json:"id,omitempty"`
	}
	JSON422 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateUserPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryUserPermissionsContextsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionAllowedContextsList
}

// Status returns HTTPResponse.Status
func (r QueryUserPermissionsContextsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryUserPermissionsContextsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryUserPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPermissionQueryResultList
}

// Status returns HTTPResponse.Status
func (r QueryUserPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryUserPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserPermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveUserPermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserPermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserPermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionBinding
}

// Status returns HTTPResponse.Status
func (r GetUserPermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserPermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Bindings Policy bindings
		Bindings *[]PolicyBinding `json:"bindings,omitempty"`

		// Policies Full policy descriptions for each policy referenced by the bindings
		Policies *[]Policy `json:"policies,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUserPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PolicyBindingRef
	JSON422      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddUserPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUserPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserPoliciesAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyList
}

// Status returns HTTPResponse.Status
func (r GetUserPoliciesAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserPoliciesAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveUserPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserTfaStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Enabled bool    `json:"enabled"`
		Mode    *string `json:"mode,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserTfaStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserTfaStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisableUserTfaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r DisableUserTfaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisableUserTfaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersUserIdTfaEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *Error
	JSON422      *Error
}

// Status returns HTTPResponse.Status
func (r PostUsersUserIdTfaEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersUserIdTfaEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetupUserTfaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Uri URI for configuring the authenticator app
		Uri *string `json:"uri,omitempty"`
	}
	JSON409 *Error
}

// Status returns HTTPResponse.Status
func (r SetupUserTfaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetupUserTfaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAuthDelegatedWithBodyWithResponse request with arbitrary body returning *PostAuthDelegatedResponse
func (c *ClientWithResponses) PostAuthDelegatedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthDelegatedResponse, error) {
	rsp, err := c.PostAuthDelegatedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthDelegatedResponse(rsp)
}

func (c *ClientWithResponses) PostAuthDelegatedWithResponse(ctx context.Context, body PostAuthDelegatedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthDelegatedResponse, error) {
	rsp, err := c.PostAuthDelegated(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthDelegatedResponse(rsp)
}

// GetAuthDelegatedUsersWithResponse request returning *GetAuthDelegatedUsersResponse
func (c *ClientWithResponses) GetAuthDelegatedUsersWithResponse(ctx context.Context, params *GetAuthDelegatedUsersParams, reqEditors ...RequestEditorFn) (*GetAuthDelegatedUsersResponse, error) {
	rsp, err := c.GetAuthDelegatedUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthDelegatedUsersResponse(rsp)
}

// AuthViaPasswordWithBodyWithResponse request with arbitrary body returning *AuthViaPasswordResponse
func (c *ClientWithResponses) AuthViaPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthViaPasswordResponse, error) {
	rsp, err := c.AuthViaPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthViaPasswordResponse(rsp)
}

func (c *ClientWithResponses) AuthViaPasswordWithResponse(ctx context.Context, body AuthViaPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthViaPasswordResponse, error) {
	rsp, err := c.AuthViaPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthViaPasswordResponse(rsp)
}

// AuthViaSessionWithBodyWithResponse request with arbitrary body returning *AuthViaSessionResponse
func (c *ClientWithResponses) AuthViaSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthViaSessionResponse, error) {
	rsp, err := c.AuthViaSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthViaSessionResponse(rsp)
}

func (c *ClientWithResponses) AuthViaSessionWithResponse(ctx context.Context, body AuthViaSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthViaSessionResponse, error) {
	rsp, err := c.AuthViaSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthViaSessionResponse(rsp)
}

// AuthStepChangePasswordWithBodyWithResponse request with arbitrary body returning *AuthStepChangePasswordResponse
func (c *ClientWithResponses) AuthStepChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthStepChangePasswordResponse, error) {
	rsp, err := c.AuthStepChangePasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthStepChangePasswordResponse(rsp)
}

func (c *ClientWithResponses) AuthStepChangePasswordWithResponse(ctx context.Context, body AuthStepChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthStepChangePasswordResponse, error) {
	rsp, err := c.AuthStepChangePassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthStepChangePasswordResponse(rsp)
}

// AuthStepFinishWithBodyWithResponse request with arbitrary body returning *AuthStepFinishResponse
func (c *ClientWithResponses) AuthStepFinishWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthStepFinishResponse, error) {
	rsp, err := c.AuthStepFinishWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthStepFinishResponse(rsp)
}

func (c *ClientWithResponses) AuthStepFinishWithResponse(ctx context.Context, body AuthStepFinishJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthStepFinishResponse, error) {
	rsp, err := c.AuthStepFinish(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthStepFinishResponse(rsp)
}

// AuthStepRecaptcha2WithBodyWithResponse request with arbitrary body returning *AuthStepRecaptcha2Response
func (c *ClientWithResponses) AuthStepRecaptcha2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthStepRecaptcha2Response, error) {
	rsp, err := c.AuthStepRecaptcha2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthStepRecaptcha2Response(rsp)
}

func (c *ClientWithResponses) AuthStepRecaptcha2WithResponse(ctx context.Context, body AuthStepRecaptcha2JSONRequestBody, reqEditors ...RequestEditorFn) (*AuthStepRecaptcha2Response, error) {
	rsp, err := c.AuthStepRecaptcha2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthStepRecaptcha2Response(rsp)
}

// AuthStepTfaWithBodyWithResponse request with arbitrary body returning *AuthStepTfaResponse
func (c *ClientWithResponses) AuthStepTfaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthStepTfaResponse, error) {
	rsp, err := c.AuthStepTfaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthStepTfaResponse(rsp)
}

func (c *ClientWithResponses) AuthStepTfaWithResponse(ctx context.Context, body AuthStepTfaJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthStepTfaResponse, error) {
	rsp, err := c.AuthStepTfa(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthStepTfaResponse(rsp)
}

// GetOpenapiJsonWithResponse request returning *GetOpenapiJsonResponse
func (c *ClientWithResponses) GetOpenapiJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenapiJsonResponse, error) {
	rsp, err := c.GetOpenapiJson(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenapiJsonResponse(rsp)
}

// GetPasswordRulesWithResponse request returning *GetPasswordRulesResponse
func (c *ClientWithResponses) GetPasswordRulesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPasswordRulesResponse, error) {
	rsp, err := c.GetPasswordRules(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPasswordRulesResponse(rsp)
}

// GetPermissionsWithResponse request returning *GetPermissionsResponse
func (c *ClientWithResponses) GetPermissionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPermissionsResponse, error) {
	rsp, err := c.GetPermissions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionsResponse(rsp)
}

// GetPermissionsAvailableWithResponse request returning *GetPermissionsAvailableResponse
func (c *ClientWithResponses) GetPermissionsAvailableWithResponse(ctx context.Context, params *GetPermissionsAvailableParams, reqEditors ...RequestEditorFn) (*GetPermissionsAvailableResponse, error) {
	rsp, err := c.GetPermissionsAvailable(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionsAvailableResponse(rsp)
}

// GetPermissionPoliciesWithResponse request returning *GetPermissionPoliciesResponse
func (c *ClientWithResponses) GetPermissionPoliciesWithResponse(ctx context.Context, permissionCode string, params *GetPermissionPoliciesParams, reqEditors ...RequestEditorFn) (*GetPermissionPoliciesResponse, error) {
	rsp, err := c.GetPermissionPolicies(ctx, permissionCode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionPoliciesResponse(rsp)
}

// GetPermissionUsersWithResponse request returning *GetPermissionUsersResponse
func (c *ClientWithResponses) GetPermissionUsersWithResponse(ctx context.Context, permissionCode string, params *GetPermissionUsersParams, reqEditors ...RequestEditorFn) (*GetPermissionUsersResponse, error) {
	rsp, err := c.GetPermissionUsers(ctx, permissionCode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionUsersResponse(rsp)
}

// GetPoliciesWithResponse request returning *GetPoliciesResponse
func (c *ClientWithResponses) GetPoliciesWithResponse(ctx context.Context, params *GetPoliciesParams, reqEditors ...RequestEditorFn) (*GetPoliciesResponse, error) {
	rsp, err := c.GetPolicies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoliciesResponse(rsp)
}

// CreatePolicyWithBodyWithResponse request with arbitrary body returning *CreatePolicyResponse
func (c *ClientWithResponses) CreatePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePolicyResponse, error) {
	rsp, err := c.CreatePolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePolicyResponse(rsp)
}

func (c *ClientWithResponses) CreatePolicyWithResponse(ctx context.Context, body CreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePolicyResponse, error) {
	rsp, err := c.CreatePolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePolicyResponse(rsp)
}

// DeletePolicyWithResponse request returning *DeletePolicyResponse
func (c *ClientWithResponses) DeletePolicyWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*DeletePolicyResponse, error) {
	rsp, err := c.DeletePolicy(ctx, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePolicyResponse(rsp)
}

// GetPolicyWithResponse request returning *GetPolicyResponse
func (c *ClientWithResponses) GetPolicyWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*GetPolicyResponse, error) {
	rsp, err := c.GetPolicy(ctx, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicyResponse(rsp)
}

// EditPolicyWithBodyWithResponse request with arbitrary body returning *EditPolicyResponse
func (c *ClientWithResponses) EditPolicyWithBodyWithResponse(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditPolicyResponse, error) {
	rsp, err := c.EditPolicyWithBody(ctx, policyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditPolicyResponse(rsp)
}

func (c *ClientWithResponses) EditPolicyWithResponse(ctx context.Context, policyId string, body EditPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*EditPolicyResponse, error) {
	rsp, err := c.EditPolicy(ctx, policyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditPolicyResponse(rsp)
}

// GetPolicyPermissionsWithResponse request returning *GetPolicyPermissionsResponse
func (c *ClientWithResponses) GetPolicyPermissionsWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*GetPolicyPermissionsResponse, error) {
	rsp, err := c.GetPolicyPermissions(ctx, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicyPermissionsResponse(rsp)
}

// AddPolicyPermissionWithBodyWithResponse request with arbitrary body returning *AddPolicyPermissionResponse
func (c *ClientWithResponses) AddPolicyPermissionWithBodyWithResponse(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPolicyPermissionResponse, error) {
	rsp, err := c.AddPolicyPermissionWithBody(ctx, policyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPolicyPermissionResponse(rsp)
}

func (c *ClientWithResponses) AddPolicyPermissionWithResponse(ctx context.Context, policyId string, body AddPolicyPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPolicyPermissionResponse, error) {
	rsp, err := c.AddPolicyPermission(ctx, policyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPolicyPermissionResponse(rsp)
}

// GetPolicyPermissionsAvailableWithResponse request returning *GetPolicyPermissionsAvailableResponse
func (c *ClientWithResponses) GetPolicyPermissionsAvailableWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*GetPolicyPermissionsAvailableResponse, error) {
	rsp, err := c.GetPolicyPermissionsAvailable(ctx, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicyPermissionsAvailableResponse(rsp)
}

// DeletePolicyPermissionWithResponse request returning *DeletePolicyPermissionResponse
func (c *ClientWithResponses) DeletePolicyPermissionWithResponse(ctx context.Context, policyId string, permissionCode string, reqEditors ...RequestEditorFn) (*DeletePolicyPermissionResponse, error) {
	rsp, err := c.DeletePolicyPermission(ctx, policyId, permissionCode, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePolicyPermissionResponse(rsp)
}

// GetPolicyUsersWithResponse request returning *GetPolicyUsersResponse
func (c *ClientWithResponses) GetPolicyUsersWithResponse(ctx context.Context, policyId string, params *GetPolicyUsersParams, reqEditors ...RequestEditorFn) (*GetPolicyUsersResponse, error) {
	rsp, err := c.GetPolicyUsers(ctx, policyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicyUsersResponse(rsp)
}

// GetScopesWithResponse request returning *GetScopesResponse
func (c *ClientWithResponses) GetScopesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetScopesResponse, error) {
	rsp, err := c.GetScopes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScopesResponse(rsp)
}

// EndSessionWithBodyWithResponse request with arbitrary body returning *EndSessionResponse
func (c *ClientWithResponses) EndSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndSessionResponse, error) {
	rsp, err := c.EndSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndSessionResponse(rsp)
}

func (c *ClientWithResponses) EndSessionWithResponse(ctx context.Context, body EndSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*EndSessionResponse, error) {
	rsp, err := c.EndSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndSessionResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// GetUserLevelsWithResponse request returning *GetUserLevelsResponse
func (c *ClientWithResponses) GetUserLevelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserLevelsResponse, error) {
	rsp, err := c.GetUserLevels(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserLevelsResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// GetUserNotesWithResponse request returning *GetUserNotesResponse
func (c *ClientWithResponses) GetUserNotesWithResponse(ctx context.Context, userId int, params *GetUserNotesParams, reqEditors ...RequestEditorFn) (*GetUserNotesResponse, error) {
	rsp, err := c.GetUserNotes(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserNotesResponse(rsp)
}

// AddUserNoteWithBodyWithResponse request with arbitrary body returning *AddUserNoteResponse
func (c *ClientWithResponses) AddUserNoteWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUserNoteResponse, error) {
	rsp, err := c.AddUserNoteWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserNoteResponse(rsp)
}

func (c *ClientWithResponses) AddUserNoteWithResponse(ctx context.Context, userId int, body AddUserNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUserNoteResponse, error) {
	rsp, err := c.AddUserNote(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserNoteResponse(rsp)
}

// SetUserPasswordWithBodyWithResponse request with arbitrary body returning *SetUserPasswordResponse
func (c *ClientWithResponses) SetUserPasswordWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetUserPasswordResponse, error) {
	rsp, err := c.SetUserPasswordWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetUserPasswordResponse(rsp)
}

func (c *ClientWithResponses) SetUserPasswordWithResponse(ctx context.Context, userId int, body SetUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*SetUserPasswordResponse, error) {
	rsp, err := c.SetUserPassword(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetUserPasswordResponse(rsp)
}

// GetUserPermissionsWithResponse request returning *GetUserPermissionsResponse
func (c *ClientWithResponses) GetUserPermissionsWithResponse(ctx context.Context, userId int, params *GetUserPermissionsParams, reqEditors ...RequestEditorFn) (*GetUserPermissionsResponse, error) {
	rsp, err := c.GetUserPermissions(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserPermissionsResponse(rsp)
}

// CreateUserPermissionWithBodyWithResponse request with arbitrary body returning *CreateUserPermissionResponse
func (c *ClientWithResponses) CreateUserPermissionWithBodyWithResponse(ctx context.Context, userId int, params *CreateUserPermissionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserPermissionResponse, error) {
	rsp, err := c.CreateUserPermissionWithBody(ctx, userId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserPermissionResponse(rsp)
}

func (c *ClientWithResponses) CreateUserPermissionWithResponse(ctx context.Context, userId int, params *CreateUserPermissionParams, body CreateUserPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserPermissionResponse, error) {
	rsp, err := c.CreateUserPermission(ctx, userId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserPermissionResponse(rsp)
}

// GetUserPermissionsAvailableWithResponse request returning *GetUserPermissionsAvailableResponse
func (c *ClientWithResponses) GetUserPermissionsAvailableWithResponse(ctx context.Context, userId int, params *GetUserPermissionsAvailableParams, reqEditors ...RequestEditorFn) (*GetUserPermissionsAvailableResponse, error) {
	rsp, err := c.GetUserPermissionsAvailable(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserPermissionsAvailableResponse(rsp)
}

// CreateUserPermissionsWithBodyWithResponse request with arbitrary body returning *CreateUserPermissionsResponse
func (c *ClientWithResponses) CreateUserPermissionsWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserPermissionsResponse, error) {
	rsp, err := c.CreateUserPermissionsWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserPermissionsResponse(rsp)
}

func (c *ClientWithResponses) CreateUserPermissionsWithResponse(ctx context.Context, userId int, body CreateUserPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserPermissionsResponse, error) {
	rsp, err := c.CreateUserPermissions(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserPermissionsResponse(rsp)
}

// QueryUserPermissionsContextsWithBodyWithResponse request with arbitrary body returning *QueryUserPermissionsContextsResponse
func (c *ClientWithResponses) QueryUserPermissionsContextsWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUserPermissionsContextsResponse, error) {
	rsp, err := c.QueryUserPermissionsContextsWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUserPermissionsContextsResponse(rsp)
}

func (c *ClientWithResponses) QueryUserPermissionsContextsWithResponse(ctx context.Context, userId int, body QueryUserPermissionsContextsJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUserPermissionsContextsResponse, error) {
	rsp, err := c.QueryUserPermissionsContexts(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUserPermissionsContextsResponse(rsp)
}

// QueryUserPermissionsWithBodyWithResponse request with arbitrary body returning *QueryUserPermissionsResponse
func (c *ClientWithResponses) QueryUserPermissionsWithBodyWithResponse(ctx context.Context, userId int, params *QueryUserPermissionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUserPermissionsResponse, error) {
	rsp, err := c.QueryUserPermissionsWithBody(ctx, userId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUserPermissionsResponse(rsp)
}

func (c *ClientWithResponses) QueryUserPermissionsWithResponse(ctx context.Context, userId int, params *QueryUserPermissionsParams, body QueryUserPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUserPermissionsResponse, error) {
	rsp, err := c.QueryUserPermissions(ctx, userId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUserPermissionsResponse(rsp)
}

// RemoveUserPermissionWithResponse request returning *RemoveUserPermissionResponse
func (c *ClientWithResponses) RemoveUserPermissionWithResponse(ctx context.Context, userId int, userPermissionId string, reqEditors ...RequestEditorFn) (*RemoveUserPermissionResponse, error) {
	rsp, err := c.RemoveUserPermission(ctx, userId, userPermissionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserPermissionResponse(rsp)
}

// GetUserPermissionWithResponse request returning *GetUserPermissionResponse
func (c *ClientWithResponses) GetUserPermissionWithResponse(ctx context.Context, userId int, userPermissionId string, reqEditors ...RequestEditorFn) (*GetUserPermissionResponse, error) {
	rsp, err := c.GetUserPermission(ctx, userId, userPermissionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserPermissionResponse(rsp)
}

// GetUserPoliciesWithResponse request returning *GetUserPoliciesResponse
func (c *ClientWithResponses) GetUserPoliciesWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserPoliciesResponse, error) {
	rsp, err := c.GetUserPolicies(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserPoliciesResponse(rsp)
}

// AddUserPolicyWithBodyWithResponse request with arbitrary body returning *AddUserPolicyResponse
func (c *ClientWithResponses) AddUserPolicyWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUserPolicyResponse, error) {
	rsp, err := c.AddUserPolicyWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserPolicyResponse(rsp)
}

func (c *ClientWithResponses) AddUserPolicyWithResponse(ctx context.Context, userId int, body AddUserPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUserPolicyResponse, error) {
	rsp, err := c.AddUserPolicy(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserPolicyResponse(rsp)
}

// GetUserPoliciesAvailableWithResponse request returning *GetUserPoliciesAvailableResponse
func (c *ClientWithResponses) GetUserPoliciesAvailableWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserPoliciesAvailableResponse, error) {
	rsp, err := c.GetUserPoliciesAvailable(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserPoliciesAvailableResponse(rsp)
}

// RemoveUserPolicyWithResponse request returning *RemoveUserPolicyResponse
func (c *ClientWithResponses) RemoveUserPolicyWithResponse(ctx context.Context, userId int, policyId string, reqEditors ...RequestEditorFn) (*RemoveUserPolicyResponse, error) {
	rsp, err := c.RemoveUserPolicy(ctx, userId, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserPolicyResponse(rsp)
}

// GetUserTfaStatusWithResponse request returning *GetUserTfaStatusResponse
func (c *ClientWithResponses) GetUserTfaStatusWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserTfaStatusResponse, error) {
	rsp, err := c.GetUserTfaStatus(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserTfaStatusResponse(rsp)
}

// DisableUserTfaWithBodyWithResponse request with arbitrary body returning *DisableUserTfaResponse
func (c *ClientWithResponses) DisableUserTfaWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DisableUserTfaResponse, error) {
	rsp, err := c.DisableUserTfaWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisableUserTfaResponse(rsp)
}

func (c *ClientWithResponses) DisableUserTfaWithResponse(ctx context.Context, userId int, body DisableUserTfaJSONRequestBody, reqEditors ...RequestEditorFn) (*DisableUserTfaResponse, error) {
	rsp, err := c.DisableUserTfa(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisableUserTfaResponse(rsp)
}

// PostUsersUserIdTfaEnableWithBodyWithResponse request with arbitrary body returning *PostUsersUserIdTfaEnableResponse
func (c *ClientWithResponses) PostUsersUserIdTfaEnableWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersUserIdTfaEnableResponse, error) {
	rsp, err := c.PostUsersUserIdTfaEnableWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersUserIdTfaEnableResponse(rsp)
}

func (c *ClientWithResponses) PostUsersUserIdTfaEnableWithResponse(ctx context.Context, userId int, body PostUsersUserIdTfaEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersUserIdTfaEnableResponse, error) {
	rsp, err := c.PostUsersUserIdTfaEnable(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersUserIdTfaEnableResponse(rsp)
}

// SetupUserTfaWithResponse request returning *SetupUserTfaResponse
func (c *ClientWithResponses) SetupUserTfaWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*SetupUserTfaResponse, error) {
	rsp, err := c.SetupUserTfa(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupUserTfaResponse(rsp)
}

// ParsePostAuthDelegatedResponse parses an HTTP response from a PostAuthDelegatedWithResponse call
func ParsePostAuthDelegatedResponse(rsp *http.Response) (*PostAuthDelegatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthDelegatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetAuthDelegatedUsersResponse parses an HTTP response from a GetAuthDelegatedUsersWithResponse call
func ParseGetAuthDelegatedUsersResponse(rsp *http.Response) (*GetAuthDelegatedUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthDelegatedUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Actor Describes a user that is eligible for delegated authentication
			Actor *DelegatedAuthUser `json:"actor,omitempty"`

			// Limit Number of rows to which the response has been limited
			Limit *int `json:"limit,omitempty"`

			// NextPointer Pointer value for getting the next set of rows
			NextPointer *string              `json:"nextPointer,omitempty"`
			Users       *[]DelegatedAuthUser `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthViaPasswordResponse parses an HTTP response from a AuthViaPasswordWithResponse call
func ParseAuthViaPasswordResponse(rsp *http.Response) (*AuthViaPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthViaPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAuthViaSessionResponse parses an HTTP response from a AuthViaSessionWithResponse call
func ParseAuthViaSessionResponse(rsp *http.Response) (*AuthViaSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthViaSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAuthStepChangePasswordResponse parses an HTTP response from a AuthStepChangePasswordWithResponse call
func ParseAuthStepChangePasswordResponse(rsp *http.Response) (*AuthStepChangePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthStepChangePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthPartialResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAuthStepFinishResponse parses an HTTP response from a AuthStepFinishWithResponse call
func ParseAuthStepFinishResponse(rsp *http.Response) (*AuthStepFinishResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthStepFinishResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAuthStepRecaptcha2Response parses an HTTP response from a AuthStepRecaptcha2WithResponse call
func ParseAuthStepRecaptcha2Response(rsp *http.Response) (*AuthStepRecaptcha2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthStepRecaptcha2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthPartialResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAuthStepTfaResponse parses an HTTP response from a AuthStepTfaWithResponse call
func ParseAuthStepTfaResponse(rsp *http.Response) (*AuthStepTfaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthStepTfaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthPartialResponseTfa
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetOpenapiJsonResponse parses an HTTP response from a GetOpenapiJsonWithResponse call
func ParseGetOpenapiJsonResponse(rsp *http.Response) (*GetOpenapiJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenapiJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPasswordRulesResponse parses an HTTP response from a GetPasswordRulesWithResponse call
func ParseGetPasswordRulesResponse(rsp *http.Response) (*GetPasswordRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPasswordRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Patterns List of patterns, all of which must match for a password to be valid.
			Patterns *[]string `json:"patterns,omitempty"`

			// Summary Short human-readable summary of the rules
			Summary *string `json:"summary,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPermissionsResponse parses an HTTP response from a GetPermissionsWithResponse call
func ParseGetPermissionsResponse(rsp *http.Response) (*GetPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPermissionsAvailableResponse parses an HTTP response from a GetPermissionsAvailableWithResponse call
func ParseGetPermissionsAvailableResponse(rsp *http.Response) (*GetPermissionsAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionsAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionAvailableList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPermissionPoliciesResponse parses an HTTP response from a GetPermissionPoliciesWithResponse call
func ParseGetPermissionPoliciesResponse(rsp *http.Response) (*GetPermissionPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionPoliciesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPermissionUsersResponse parses an HTTP response from a GetPermissionUsersWithResponse call
func ParseGetPermissionUsersResponse(rsp *http.Response) (*GetPermissionUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionUsersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPoliciesResponse parses an HTTP response from a GetPoliciesWithResponse call
func ParseGetPoliciesResponse(rsp *http.Response) (*GetPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePolicyResponse parses an HTTP response from a CreatePolicyWithResponse call
func ParseCreatePolicyResponse(rsp *http.Response) (*CreatePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// Id Id of the newly-created policy
			Id *string `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeletePolicyResponse parses an HTTP response from a DeletePolicyWithResponse call
func ParseDeletePolicyResponse(rsp *http.Response) (*DeletePolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetPolicyResponse parses an HTTP response from a GetPolicyWithResponse call
func ParseGetPolicyResponse(rsp *http.Response) (*GetPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditPolicyResponse parses an HTTP response from a EditPolicyWithResponse call
func ParseEditPolicyResponse(rsp *http.Response) (*EditPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPolicyPermissionsResponse parses an HTTP response from a GetPolicyPermissionsWithResponse call
func ParseGetPolicyPermissionsResponse(rsp *http.Response) (*GetPolicyPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicyPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddPolicyPermissionResponse parses an HTTP response from a AddPolicyPermissionWithResponse call
func ParseAddPolicyPermissionResponse(rsp *http.Response) (*AddPolicyPermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPolicyPermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PolicyPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetPolicyPermissionsAvailableResponse parses an HTTP response from a GetPolicyPermissionsAvailableWithResponse call
func ParseGetPolicyPermissionsAvailableResponse(rsp *http.Response) (*GetPolicyPermissionsAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicyPermissionsAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePolicyPermissionResponse parses an HTTP response from a DeletePolicyPermissionWithResponse call
func ParseDeletePolicyPermissionResponse(rsp *http.Response) (*DeletePolicyPermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePolicyPermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPolicyUsersResponse parses an HTTP response from a GetPolicyUsersWithResponse call
func ParseGetPolicyUsersResponse(rsp *http.Response) (*GetPolicyUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicyUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyUsersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetScopesResponse parses an HTTP response from a GetScopesWithResponse call
func ParseGetScopesResponse(rsp *http.Response) (*GetScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScopeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndSessionResponse parses an HTTP response from a EndSessionWithResponse call
func ParseEndSessionResponse(rsp *http.Response) (*EndSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserLevelsResponse parses an HTTP response from a GetUserLevelsWithResponse call
func ParseGetUserLevelsResponse(rsp *http.Response) (*GetUserLevelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserLevelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			UserLevels *[]UserLevel `json:"userLevels,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserNotesResponse parses an HTTP response from a GetUserNotesWithResponse call
func ParseGetUserNotesResponse(rsp *http.Response) (*GetUserNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Limit Number of rows to which the response has been limited to
			Limit *int `json:"limit,omitempty"`

			// NextPointer Pointer value for getting the next set of rows
			NextPointer *string     `json:"nextPointer,omitempty"`
			Notes       *[]UserNote `json:"notes,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddUserNoteResponse parses an HTTP response from a AddUserNoteWithResponse call
func ParseAddUserNoteResponse(rsp *http.Response) (*AddUserNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddUserNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSetUserPasswordResponse parses an HTTP response from a SetUserPasswordWithResponse call
func ParseSetUserPasswordResponse(rsp *http.Response) (*SetUserPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetUserPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetUserPermissionsResponse parses an HTTP response from a GetUserPermissionsWithResponse call
func ParseGetUserPermissionsResponse(rsp *http.Response) (*GetUserPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionBindingList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserPermissionResponse parses an HTTP response from a CreateUserPermissionWithResponse call
func ParseCreateUserPermissionResponse(rsp *http.Response) (*CreateUserPermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserPermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionBindingRef
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PermissionBindingRef
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetUserPermissionsAvailableResponse parses an HTTP response from a GetUserPermissionsAvailableWithResponse call
func ParseGetUserPermissionsAvailableResponse(rsp *http.Response) (*GetUserPermissionsAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserPermissionsAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionAvailableList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserPermissionsResponse parses an HTTP response from a CreateUserPermissionsWithResponse call
func ParseCreateUserPermissionsResponse(rsp *http.Response) (*CreateUserPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Id Binding ID
			Id *string `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseQueryUserPermissionsContextsResponse parses an HTTP response from a QueryUserPermissionsContextsWithResponse call
func ParseQueryUserPermissionsContextsResponse(rsp *http.Response) (*QueryUserPermissionsContextsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryUserPermissionsContextsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionAllowedContextsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQueryUserPermissionsResponse parses an HTTP response from a QueryUserPermissionsWithResponse call
func ParseQueryUserPermissionsResponse(rsp *http.Response) (*QueryUserPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryUserPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPermissionQueryResultList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveUserPermissionResponse parses an HTTP response from a RemoveUserPermissionWithResponse call
func ParseRemoveUserPermissionResponse(rsp *http.Response) (*RemoveUserPermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserPermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserPermissionResponse parses an HTTP response from a GetUserPermissionWithResponse call
func ParseGetUserPermissionResponse(rsp *http.Response) (*GetUserPermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserPermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionBinding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserPoliciesResponse parses an HTTP response from a GetUserPoliciesWithResponse call
func ParseGetUserPoliciesResponse(rsp *http.Response) (*GetUserPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Bindings Policy bindings
			Bindings *[]PolicyBinding `json:"bindings,omitempty"`

			// Policies Full policy descriptions for each policy referenced by the bindings
			Policies *[]Policy `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddUserPolicyResponse parses an HTTP response from a AddUserPolicyWithResponse call
func ParseAddUserPolicyResponse(rsp *http.Response) (*AddUserPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddUserPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PolicyBindingRef
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetUserPoliciesAvailableResponse parses an HTTP response from a GetUserPoliciesAvailableWithResponse call
func ParseGetUserPoliciesAvailableResponse(rsp *http.Response) (*GetUserPoliciesAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserPoliciesAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveUserPolicyResponse parses an HTTP response from a RemoveUserPolicyWithResponse call
func ParseRemoveUserPolicyResponse(rsp *http.Response) (*RemoveUserPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserTfaStatusResponse parses an HTTP response from a GetUserTfaStatusWithResponse call
func ParseGetUserTfaStatusResponse(rsp *http.Response) (*GetUserTfaStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserTfaStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Enabled bool    `json:"enabled"`
			Mode    *string `json:"mode,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDisableUserTfaResponse parses an HTTP response from a DisableUserTfaWithResponse call
func ParseDisableUserTfaResponse(rsp *http.Response) (*DisableUserTfaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DisableUserTfaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePostUsersUserIdTfaEnableResponse parses an HTTP response from a PostUsersUserIdTfaEnableWithResponse call
func ParsePostUsersUserIdTfaEnableResponse(rsp *http.Response) (*PostUsersUserIdTfaEnableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersUserIdTfaEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSetupUserTfaResponse parses an HTTP response from a SetupUserTfaWithResponse call
func ParseSetupUserTfaResponse(rsp *http.Response) (*SetupUserTfaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetupUserTfaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Uri URI for configuring the authenticator app
			Uri *string `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}
